---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/7/24 11:04
---

local SystemInfo = UnityEngine.SystemInfo
local Core_RenderSetting = SGEngine.Rendering.RenderSetting
Application = UnityEngine.Application
local sfind, sgsub, smatch = string.find, string.gsub, string.match

DeviceUtil = DeviceUtil or
{
    m_IsAndroidEmulator = false
}

function DeviceUtil.GetGraphicsDeviceNameMobile(graphicsDeviceName)
    if string.IsNullOrEmpty(graphicsDeviceName) then
        return "Unknown", graphicsDeviceName
    end

    local deviceNameLower = string.lower(graphicsDeviceName)

    if sfind(deviceNameLower, "adreno") then
        return "Adreno", graphicsDeviceName
    elseif sfind(deviceNameLower, "mali") or sfind(deviceNameLower, "immortalis") then
        return "Mali", graphicsDeviceName
    elseif sfind(deviceNameLower, "apple a") then
        return "Apple", graphicsDeviceName
    end

    return "Unknown", graphicsDeviceName
end

function DeviceUtil.GetGraphicsDeviceName()
    local deviceName = SystemInfo.graphicsDeviceName

    if Application.isEditor then
        return "Editor", deviceName
    end

    if Application.isMobilePlatform then
        return DeviceUtil.GetGraphicsDeviceNameMobile(deviceName)
    else
        return "Standalone", deviceName
    end
end

function DeviceUtil.GetAdrenoQuality(graphicsDeviceName)
    local grahpicNo = sgsub(graphicsDeviceName, "[^0-9]+", "")
    grahpicNo = tonumber(grahpicNo)

    if not grahpicNo then
        return false
    end

    local Quality = Core_RenderSetting.Quality

    if grahpicNo >= 540 then
        return true, Quality.High, grahpicNo
    elseif grahpicNo >= 512 then
        return true, Quality.Medium, grahpicNo
    end

    return true, Quality.Low, grahpicNo
end

function DeviceUtil.GetMaliQualityG(graphicsDeviceName)
    --local grahpicNo = sgsub(graphicsDeviceName, "[^0-9]+", "")
    local grahpicNo = smatch(graphicsDeviceName, "[0-9]+")
    grahpicNo = tonumber(grahpicNo)

    if not grahpicNo then
        return false
    end

    local Quality = Core_RenderSetting.Quality

    if grahpicNo < 100 then
        if grahpicNo >= 76 then
            return true, Quality.High, grahpicNo
        elseif grahpicNo >= 72 then
            return true, Quality.Medium, grahpicNo
        end
    else
        if grahpicNo >= 710 then
            return true, Quality.High, grahpicNo
        elseif grahpicNo >= 610 then
            return true, Quality.Medium, grahpicNo
        end
    end

    return true, Quality.Low, grahpicNo
end

function DeviceUtil.GetMaliQualityT(graphicsDeviceName)
    local grahpicNo = sgsub(graphicsDeviceName, "[^0-9]+", "")
    grahpicNo = tonumber(grahpicNo)

    if not grahpicNo then
        return false
    end

    local Quality = Core_RenderSetting.Quality

    if grahpicNo >= 880 then
        return true, Quality.Medium, grahpicNo
    end

    return true, Quality.Low, grahpicNo
end

function DeviceUtil.GetMaliQuality(graphicsDeviceName)
    local deviceNameLower = string.lower(graphicsDeviceName)

    if sfind(deviceNameLower, "mali%-g") or sfind(deviceNameLower, "immortalis%-g") then
        return DeviceUtil.GetMaliQualityG(graphicsDeviceName)
    elseif sfind(deviceNameLower, "mali%-t") then
        return DeviceUtil.GetMaliQualityT(graphicsDeviceName)
    else
        return true, Core_RenderSetting.Quality.Low, 0
    end
end

function DeviceUtil.GetAppleQuality(graphicsDeviceName)
    return true, Core_RenderSetting.Quality.High, 0
end

function DeviceUtil.GetRecommendedQuality()
    local deviceType, graphicsDeviceName = DeviceUtil.GetGraphicsDeviceName()

    if deviceType == "Editor" or deviceType == "Standalone" then
        return true, Core_RenderSetting.Quality.High, deviceType, graphicsDeviceName
    end

    local isSucc = false
    local quality = Core_RenderSetting.Quality.Low
    local grahpicNo = 0

    if deviceType == "Adreno" then
        isSucc, quality, grahpicNo = DeviceUtil.GetAdrenoQuality(graphicsDeviceName)
    elseif deviceType == "Mali" then
        isSucc, quality, grahpicNo = DeviceUtil.GetMaliQuality(graphicsDeviceName)
    elseif deviceType == "Apple" then
        isSucc, quality, grahpicNo = DeviceUtil.GetAppleQuality(graphicsDeviceName)
    end

    if isSucc then
        return true, quality, deviceType, graphicsDeviceName, grahpicNo
    else
        return false, quality, deviceType, graphicsDeviceName, grahpicNo
    end
end

function DeviceUtil.AutoSetRenderingQuality()
    if DeviceUtil.m_IsAndroidEmulator then
        DeviceUtil.OnAndroidSimulatorNotified(true)
        return
    end

    if PlayerPrefsHelper.HasKey(PlayerPrefsHelper.Keys.RenderSetting_Quality) then        
        local quality = PlayerPrefsHelper.GetInt(PlayerPrefsHelper.Keys.RenderSetting_Quality)
        Logger.LogInfoFormat("[DeviceUtil](AutoSetRenderingQuality) set quality with PlayerPrefs, quality: {0} ", quality)
        DeviceUtil.SetRenderingQualityWithInt(quality)        
    else
        local isSucc, quality, deviceType, graphicsDeviceName, grahpicNo = DeviceUtil.GetRecommendedQuality()
        if isSucc then
            Logger.LogInfoFormat("[DeviceUtil](AutoSetRenderingQuality)grahpicDeviceName:{0}, deviceType: {1}, grahpicNo: {2}, auto set quality: {3}", graphicsDeviceName, deviceType, grahpicNo, quality)
            Core_RenderSetting.SetQualityWithMaxPriority(quality)
            Core_RenderSetting.SetQualityForPostProcess(quality)            
        else
            Logger.LogErrorFormat("[DeviceUtil](AutoSetRenderingQuality)auto set quality failed, gpuDeviceName: {0}, use Quality.Low as default", graphicsDeviceName)
            Core_RenderSetting.SetQualityWithMaxPriority(Core_RenderSetting.Quality.Low)
            Core_RenderSetting.SetQualityForPostProcess(Core_RenderSetting.Quality.Low)            
        end
    end    
end

function DeviceUtil.AutoSetPostProcessQuality()
    --[[
    return

    if DeviceUtil.m_IsAndroidEmulator then
        DeviceUtil.OnAndroidSimulatorNotified(true)
        return
    end

    local isSucc, quality, deviceType, graphicsDeviceName, grahpicNo = DeviceUtil.GetRecommendedQuality()

    if isSucc then
        Core_RenderSetting.SetQualityForPostProcess(quality)
        Logger.LogInfoFormat("[DeviceUtil](AutoSetRenderingQuality)grahpicDeviceName:{0}, deviceType: {1}, grahpicNo: {2}, auto set quality: {3}", graphicsDeviceName, deviceType, grahpicNo, quality)
    else
        Core_RenderSetting.SetQualityForPostProcess(Core_RenderSetting.Quality.Low)
        Logger.LogErrorFormat("[DeviceUtil](AutoSetRenderingQuality)auto set quality failed, gpuDeviceName: {0}, use Quality.Low as default", graphicsDeviceName)
    end
    --]]
end

function DeviceUtil.SetRenderingQualityWithInt(quality)
    if quality == 0 then
        Core_RenderSetting.SetQuality(Core_RenderSetting.Quality.Low)
        Core_RenderSetting.SetQualityForPostProcess(Core_RenderSetting.Quality.Low)
    elseif quality == 1 then
        Core_RenderSetting.SetQuality(Core_RenderSetting.Quality.Medium)
        Core_RenderSetting.SetQualityForPostProcess(Core_RenderSetting.Quality.Medium)
    elseif quality == 2 then
        Core_RenderSetting.SetQuality(Core_RenderSetting.Quality.High)
        Core_RenderSetting.SetQualityForPostProcess(Core_RenderSetting.Quality.High)
    elseif quality == 3 then
        Core_RenderSetting.SetQuality(Core_RenderSetting.Quality.Ultra)
        Core_RenderSetting.SetQualityForPostProcess(Core_RenderSetting.Quality.Ultra)
    end
end

function DeviceUtil.OnAndroidSimulatorNotified(isAndroidEmulator)
    DeviceUtil.m_IsAndroidEmulator = isAndroidEmulator

    if DeviceUtil.m_IsAndroidEmulator then
        local Quality = Core_RenderSetting.Quality
        Core_RenderSetting.SetQualityWithMaxPriority(Quality.High)
        Logger.LogInfoFormat("[DeviceUtil](OnAndroidSimulatorNotified)Device is AndroidEmulator, quality: {0}", Quality.High)
    end
end

return DeviceUtil