---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/3/9 17:58
---

TurnStrategyManager = TurnStrategyManager or {}
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
local AnimationEventDefines = SGEngine.Core.AnimationEventDefines
local StateDefine = SGEngine.Core.StateDefine
TurnStrategyManager.m_AllObjects = {}
local k_TotalNum = 10

function TurnStrategyManager.Init()

end

function TurnStrategyManager.CreateDemo()
    TurnStrategyManager.m_ReadyObjectNum = 0
    local monsterId
    local row = 0
    local column = 0

    for i = 1, k_TotalNum do
        if i % 2 == 0 then
            monsterId = 10
            column = 0
        else
            monsterId = 11
            column = 1
            row = row + 1
        end
        local position = Vector3.New(row * 3, 0, column * 5)
        local object = ObjectManager.CreateClientMonster(monsterId, position, column * 180, 1, TurnStrategyManager.OnModelLoadComplete)
        local component = ComponentTurnStrategy.New()
        object.m_TurnStrategyComponent = component
        object:AddComponent(component)
        component:SetFormationPosition(position)
        table.insert(TurnStrategyManager.m_AllObjects, object)
    end
end

function TurnStrategyManager.OnModelLoadComplete(object)
    TurnStrategyManager.m_ReadyObjectNum = TurnStrategyManager.m_ReadyObjectNum + 1
    if TurnStrategyManager.m_ReadyObjectNum < k_TotalNum then
        return
    end

    TurnStrategyManager.BeginDemo()
end

function TurnStrategyManager.BeginDemo()
    TurnStrategyManager.m_CurrentIndex = 1
    TurnStrategyManager.m_LastIndex = 1
    TurnStrategyManager.m_IsStart = true
end

function TurnStrategyManager.StopDemo()
    TurnStrategyManager.m_IsStart = false
    TurnStrategyManager.m_AllObjects = {}
end

function TurnStrategyManager.Destroy()
end

function TurnStrategyManager.Update(deltaTime)
    if not TurnStrategyManager.m_IsStart then
        return
    end

    TurnStrategyManager.CheckUseSkill()
end

function TurnStrategyManager.BeforeChangeScene(prevSceneType, nextSceneType)
    if nextSceneType ~= SceneTypeEnum.Battle and TurnStrategyManager.m_IsStart == true then
        TurnStrategyManager.StopDemo()
    end
end

function TurnStrategyManager.AfterChangeScene(prevSceneType, nextSceneType)
    if nextSceneType == SceneTypeEnum.Battle then
        TurnStrategyController.OpenView()
    elseif prevSceneType == SceneTypeEnum.Battle then
        TurnStrategyController.CloseView()
    end
end

function TurnStrategyManager.CheckUseSkill()
    local currentIndex = TurnStrategyManager.m_CurrentIndex
    local lastIndex = TurnStrategyManager.m_LastIndex
    local nextIndex = currentIndex % k_TotalNum + 1

    local currentObject = TurnStrategyManager.m_AllObjects[currentIndex]
    local lastObject = TurnStrategyManager.m_AllObjects[lastIndex]
    local nextObject = TurnStrategyManager.m_AllObjects[nextIndex]

    if not currentObject or not nextObject or not lastObject then
        return
    end

    local currentObjectID = currentObject:GetObjectID()
    local nextObjectID = nextObject:GetObjectID()
    local lastObjectID = lastObject:GetObjectID()

    if lastObject:IsState(StateDefine.k_StateSkill) then
        return
    end

    local skillList = currentObject:GetSkillList()
    local skillID = skillList[1]
    local syncInfo = {}
    --Logger.LogInfo("OnStateUseSkill:{%f},{%f},{%f},%d, skillId:%d", posX, posY, posZ, Time.frameCount, skillId)
    syncInfo.m_TargetPosition = currentObject:GetPosition()
    syncInfo.m_TargetObjPosition = nextObject:GetPosition()
    syncInfo.m_Angle = currentObject:GetAngle()

    local targetID, targetObject
    if currentIndex % 2 == 0 then
        targetID = lastObjectID
        targetObject = lastObject
    else
        targetID = nextObjectID
        targetObject = nextObject
    end

    currentObject:RawUseSkillBySyncInfo(skillID, targetID, syncInfo)
    TurnStrategyManager.m_LastIndex = currentIndex
    TurnStrategyManager.m_CurrentIndex = nextIndex

    local skill = currentObject.m_SkillComponent:GetCurrentSkill()
    local func = skill.OnSkillEvent
    skill.OnSkillEvent = function(self, eventName)
        func(self, eventName)
        local hitPoint = ComponentFightResult.HitEventName2HitPointTable[eventName]
        if hitPoint == nil or hitPoint < 0 then
            return
        end
        targetObject:HandleDamage(currentObjectID, 100, skillID, 0)
        targetObject:ChangeToHit(StateConsts.HitTypeEnum.NormalHit, nil, targetObject:GetPosition(), 0, targetObject:GetAngle())
    end
end

return TurnStrategyManager