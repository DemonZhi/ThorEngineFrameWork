---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/3/8 17:36
---
local EffectBase = require("Engine/Systems/EffectSystem/Effects/EffectBase")
local PoolingStrategyTypeEnum = require("Engine/Systems/ResourceSystem/PoolingStrategyTypeEnum")
local MotionEffect = class("MotionEffect", EffectBase)

local MoveType = {
    MoveTo = 1,
    MoveBack = 2,
}

function MotionEffect:Ctor(...)
    MotionEffect.__super.Ctor(self, ...)
    self.m_PoolingStrategyType = PoolingStrategyTypeEnum.DontDestroyOnLoad
end

function MotionEffect:Start(needLoadResource)
    self.__super.Start(self, needLoadResource)
end

function MotionEffect:SetTargetID(targetID)
    if not targetID then
        return
    end
    self.m_Target = ObjectManager.GetObject(targetID)
    if self.m_Target == nil then
        Logger.LogErrorFormat("[MotionEffect](SetTargetID) Find Target failed, ObjID:%s", targetID)
    end
end

function MotionEffect:InitPosition()
    --- override and do nothing
end

function MotionEffect:OnLoadModelSuccess()
    local type = System.Type.GetType("SGEngine.Core.MotionEffect")
    local behaviour = self.m_Instance:GetComponent(type)
    self.m_CoreBehaviour = behaviour
    if behaviour == nil then
        Logger.LogErrorFormat("[MotionEffect](OnModelLoadSuccess) Find MotionEffect failed")
        return
    end

    self.m_MoveType = behaviour.moveType
    self:InitMoveParam()
end

function MotionEffect:InitMoveParam()
    if self.m_Target == nil then
        Logger.LogErrorFormat("[MotionEffect](InitMoveParam) None Target")
        return
    end

    local owner = self.m_Owner
    local behaviour = self.m_CoreBehaviour
    local offsetX, offsetY, offsetZ
    if self.m_MoveType == MoveType.MoveTo then
        self.m_StartPositionX, self.m_StartPositionY, self.m_StartPositionZ = owner.m_TurnStrategyComponent:GetFormationPositionXYZ()
        self.m_EndPositionX, self.m_EndPositionY, self.m_EndPositionZ = self.m_Target:GetPositionXYZ()
        offsetX, offsetY, offsetZ = behaviour:GetOffsetXYZ(nil, nil, nil)
    elseif self.m_MoveType == MoveType.MoveBack then
        self.m_StartPositionX, self.m_StartPositionY, self.m_StartPositionZ = owner:GetPositionXYZ()
        self.m_EndPositionX, self.m_EndPositionY, self.m_EndPositionZ = owner.m_TurnStrategyComponent:GetFormationPositionXYZ()
        offsetX = 0
        offsetY = 0
        offsetZ = 0
    else
        Logger.LogErrorFormat("[MotionEffect](InitMoveParam) Invalid Move Type")
        return
    end

    self.m_DistanceX = self.m_EndPositionX - self.m_StartPositionX
    self.m_DistanceY = self.m_EndPositionY - self.m_StartPositionY
    self.m_DistanceZ = self.m_EndPositionZ - self.m_StartPositionZ

    self.m_DistanceNormX, self.m_DistanceNormY, self.m_DistanceNormZ = Vector3.NormalizeByXYZ(self.m_DistanceX, self.m_DistanceY, self.m_DistanceZ)

    self.m_DistanceX = self.m_DistanceX + self.m_DistanceNormX * offsetX
    self.m_DistanceY = self.m_DistanceY + self.m_DistanceNormY * offsetY
    self.m_DistanceZ = self.m_DistanceZ + self.m_DistanceNormZ * offsetZ
end

function MotionEffect:Update(deltaTime)
    self.__super.Update(self, deltaTime)

    local behaviour = self.m_CoreBehaviour

    if behaviour == nil then
        return
    end

    local timePoint = self.m_Time / self.m_Config.m_Duration
    local percentage = behaviour:GetCurveValue(timePoint)
    local positionX, positionY, positionZ
    positionX = self.m_StartPositionX + self.m_DistanceX * percentage
    positionY = self.m_StartPositionY + self.m_DistanceY * percentage
    positionZ = self.m_StartPositionZ + self.m_DistanceZ * percentage

    self.m_Owner:SetPositionXYZ(positionX, positionY, positionZ)
end

function MotionEffect:Destroy()
    self.m_CoreBehaviour = nil
    self.__super.Destroy(self)
end

return MotionEffect