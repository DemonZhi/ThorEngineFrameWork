---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/9/14 9:50
---

local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local ComponentContainer = class("ComponentContainer")

function ComponentContainer:Ctor()

end

function ComponentContainer:Init()
    self.m_ComponentMap = {}
    self.m_ComponentMapWithUpdate = {}
end

function ComponentContainer:Update(deltaTime)
    for i, v in pairs(self.m_ComponentMapWithUpdate) do
        if v then
            v:Update(deltaTime)
        end
    end
end

function ComponentContainer:LateUpdate()
    for i, v in pairs(self.m_ComponentMapWithUpdate) do
        if v then
            v:LateUpdate()
        end
    end
end

function ComponentContainer:Destroy()
    for i, v in pairs(self.m_ComponentMap) do
        if v then
            v:Destroy()
        end
    end

    self.m_ComponentMap = nil
    self.m_ComponentMapWithUpdate = nil
end

function ComponentContainer:AddComponent(component, needUpdate)
    needUpdate = needUpdate or false
    local componentId = component.m_ComponentId
    if componentId == ComponentDefine.k_ComponentNone then
        Logger.Error("[ComponentContainer] AddComponent:Try To Add Invalid component")
        return false
    end

    local currentComp = self.m_ComponentMap[componentId]
    if currentComp then
        Logger.Error("[ComponentContainer] AddComponent:Try To Add Existing component")
        return false
    end

    self.m_ComponentMap[componentId] = component
    if needUpdate then
        self.m_ComponentMapWithUpdate[componentId] = component
    end

    return true
end

function ComponentContainer:RemoveComponent(componentId)
    local component = self.m_ComponentMap[componentId]
    if not component then
        return nil
    end
    self.m_ComponentMap[componentId] = nil

    component = self.m_ComponentMapWithUpdate[componentId]
    if component then
        self.m_ComponentMapWithUpdate[componentId] = nil
    end
    --table.remove(self.m_ComponentMap, componentId)
    return component
end

function ComponentContainer:GetComponent(componentId)
    return self.m_ComponentMap[componentId]
end

function ComponentContainer:ResetAllComponents()
    for i, v in pairs(self.m_ComponentMap) do
        v:Reset()
    end
end

function ComponentContainer:OnModelLoadComplete()
    for i, v in pairs(self.m_ComponentMap) do
        v:OnModelLoadComplete()
    end
end

function ComponentContainer:SetComponentUpdateActive(componentId, active)
    if not active then
        local component = self.m_ComponentMapWithUpdate[componentId]
        if not component then
            return
        end
        self.m_ComponentMapWithUpdate[componentId] = nil
    else
        local component = self.m_ComponentMap[componentId]
        if not component then
            return
        end
        self.m_ComponentMapWithUpdate[componentId] = component
    end
end

return ComponentContainer