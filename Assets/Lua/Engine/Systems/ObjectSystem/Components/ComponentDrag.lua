---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/7/12 16:36
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local ComponentDrag = class("ComponentDrag", ComponentBase)
ComponentDrag.m_ComponentId = ComponentDefine.ComponentType.k_ComponentDrag

function ComponentDrag:Init(object)
    ComponentDrag.__super.Init(self, object)
    self.m_DragList = {}
end

function ComponentDrag:Update(deltaTime)

end

function ComponentDrag:LateUpdate()
    if self.m_DragList == nil then
        return
    end

    for _, dragData in pairs(self.m_DragList) do
        self:DoDrag(dragData)
    end
end

function ComponentDrag:Destroy()
    self.m_DragList = nil
    ComponentDrag.__super.Destroy(self)
end

function ComponentDrag:AddDrag(invokerID, dragSpeed, effectSn, noiseX, noiseZ)
    if self.m_DragList[effectSn] ~= nil then
        Logger.LogErrorFormat("[ComponentDrag](AddDrag)Repeat add, sn:" .. effectSn)
        return
    end
    local dragData = {}
    dragData.m_InvokerID = invokerID
    dragData.m_DragSpeed = dragSpeed
    dragData.m_NoiseX = noiseX
    dragData.m_NoiseZ = noiseZ
    self.m_DragList[effectSn] = dragData
    --Logger.LogInfo("[ComponentDrag](AddDrag)dragSpeed : %s, sn: %s" , dragSpeed, effectSn)
end

function ComponentDrag:RemoveDrag(effectSn)
    self.m_DragList[effectSn] = nil
    --Logger.LogInfo("[ComponentDrag](RemoveDrag) sn: %s" ,  effectSn)
end

function ComponentDrag:DoDrag(dragData)
    local invokerID = dragData.m_InvokerID
    local dragSpeed = dragData.m_DragSpeed
    local noiseX = dragData.m_NoiseX
    local noiseZ = dragData.m_NoiseZ
    local invoker = ObjectManager.GetObject(invokerID)
    if not invoker then
        return
    end

    local invokerX, invokerY, invokerZ = invoker:GetPositionXYZ()
    local distance = dragSpeed * Time.deltaTime
    local ret, targetX, targetY, targetZ = self.m_Owner.m_Core:RaycastToPositionWithDistance(invokerX + noiseX, invokerY, invokerZ + noiseZ, distance, nil, nil, nil)
    --Logger.LogInfo("[ComponentDrag].(DoDrag): ret:%s, dis:%s", ret, distance)

    if ret == true then
        self.m_Owner:SetPositionXYZ(targetX, targetY, targetZ)
    end
end

return ComponentDrag