---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/9/14 18:13
---

local ComponentFightResult = class("ComponentFightResult", ComponentBase)
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
ComponentFightResult.m_ComponentId = ComponentDefine.ComponentType.k_ComponentFightResult

ComponentFightResult.k_HitPrefix = "hit"
local FightResultType = ComponentDefine.FightResultType

ComponentFightResult.HitEventName2HitPointTable = {}
for i = 0, 50 do
    local key = string.format("%s_%s", ComponentFightResult.k_HitPrefix, tostring(i))
    ComponentFightResult.HitEventName2HitPointTable[key] = i
end

function ComponentFightResult:Init(object)
    ComponentFightResult.__super.Init(self, object)
    self.m_FightResultList = {}
    self.m_ExecutedList = {}
    self.m_CacheEnable = false
end

function ComponentFightResult:StartCache(skillId)
    if self.m_CacheEnable then
        self:StopCache()
    end
    self.m_CacheEnable = true
    self.m_CurrentHitPoint = -1
    self.m_CurrentSkillId = skillId
end

function ComponentFightResult:Destroy()
    self:FlushSkillResult(self.m_CurrentSkillId)
    ComponentFightResult.__super.Destroy(self)
end

function ComponentFightResult:StopCache(skillId)
    self.m_CacheEnable = false
    self:FlushSkillResult(skillId)
end

function ComponentFightResult:HandleAnimationEvent(skillId, eventName)
    if string.find(eventName, ComponentFightResult.k_HitPrefix) == nil then
        return
    end

    --Logger.LogDebugFormat("ComponentFightResult:HandleAnimationEvent:{0},{1}", skillId, eventName)
    local hitPoint = ComponentFightResult.HitEventName2HitPointTable[eventName]
    if hitPoint == nil or hitPoint < 0 then
        return
    end

    self:ExecuteResult(skillId, hitPoint)
end

function ComponentFightResult:CheckCache(fightResult)
    if not fightResult then
        return
    end
    if self.m_CacheEnable == false then
        fightResult:Execute()
        fightResult:Destroy()
    elseif self.m_CurrentHitPoint >= 0 and self.m_CurrentHitPoint + 1 >= fightResult.m_HitPoint then
        fightResult:Execute()
        fightResult:Destroy()
    --elseif fightResult.GetActionID ~= nil and self.m_CurrentSkillId ~= fightResult:GetActionID() then
    --    Logger.LogInfo(" current:%s, fight:%s",self.m_CurrentSkillId, fightResult:GetActionID())
    --    fightResult:Execute()
    --    fightResult:Destroy()
    else
        table.insert(self.m_FightResultList, fightResult)
        -----record
        if fightResult.m_FightResultType > FightResultType.k_NeedRecordType then
            self:RecordToHitObject(fightResult)
        end
    end
end

function ComponentFightResult:ExecuteResult(skillId, hitPoint)
    self.m_CurrentHitPoint = hitPoint
    if #self.m_FightResultList == 0 then
        return
    end
    for i, result in pairs(self.m_FightResultList) do
        if result and result.m_HitPoint <= hitPoint + 1 then
            --Logger.LogInfo("[ComponentFightResult]Execute:{%s},{%d},{%d},frame:{%d}",result.__className, skillId, result.m_HitPoint, Time.frameCount)
            result:Execute()
            if result.m_FightResultType > FightResultType.k_NeedRecordType then
                self:ClearHitObjectRecord(result)
            end
            table.insert(self.m_ExecutedList, result)
        end
    end

    for i, result in pairs(self.m_ExecutedList) do
        local index = table.findFirstIndex(self.m_FightResultList, function (x)
            return x == result
        end)
        table.remove(self.m_FightResultList, index)
        result:Destroy()
    end
    self.m_ExecutedList = {}
end

function ComponentFightResult:FlushSkillResult(skillId)
    local allResults = self.m_FightResultList
    self.m_FightResultList = {}
    for i, result in pairs(allResults) do
        if result then
            --Logger.LogDebugFormat("[ComponentFightResult]FlushSkillResult:{0},{1}", skillId, result.__className)
            result:Execute()
            if result.m_FightResultType > FightResultType.k_NeedRecordType then
                self:ClearHitObjectRecord(result)
            end
            result:Destroy()
        end
    end
end

function ComponentFightResult:RemoveFightResult(removeResult)
    if not removeResult then
        return
    end
    local removeIndex = -1
    for i = #self.m_FightResultList, 1, -1 do
        local fightResult = self.m_FightResultList[i]
        if fightResult ~= nil and fightResult == removeResult then
            removeIndex = i
            break
        end
    end

    if removeIndex > 0 then
        removeResult:Destroy()
        table.remove(self.m_FightResultList, removeIndex)
    end
end

function ComponentFightResult:RecordToHitObject(fightResult)
    if fightResult.m_TargetID == nil then
        return
    end

    local hitObject = ObjectManager.GetObject(fightResult.m_TargetID)
    if not hitObject then
        return
    end

    local recordComponent = hitObject.m_FightResultRecordComponent
    if not recordComponent then
        return
    end

    recordComponent:RecordFightResult(fightResult)
end

function ComponentFightResult:ClearHitObjectRecord(fightResult)
    if fightResult.m_TargetID == nil then
        return
    end

    local hitObject = ObjectManager.GetObject(fightResult.m_TargetID)
    if not hitObject then
        return
    end

    local recordComponent = hitObject.m_FightResultRecordComponent
    if not recordComponent then
        return
    end

    recordComponent:RemoveFightResult(fightResult)
end

return ComponentFightResult
