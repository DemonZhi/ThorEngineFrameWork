---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/1/19 10:06
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local BattleMessage = require("MainGame/Message/BattleMessage")
local ComponentRide = class("ComponentRide", ComponentBase)
ComponentRide.m_ComponentId = ComponentDefine.ComponentType.k_ComponentRide
local StateDefine = SGEngine.Core.StateDefine

function ComponentRide:Init(object)
    ComponentRide.__super.Init(self, object)
    self.m_IsRiding = false
    self.m_IsInit = false
    self.m_CurrentRideId = -1
end

function ComponentRide:Destroy()
    ComponentRide.__super.Destroy(self)
end

function ComponentRide:Deserialize(netBuffer)

end

function ComponentRide:DeserializeActive(netBuffer)
    local server_time = netBuffer:ReadInt()
    local equiped_id_ = netBuffer:ReadInt()
    local count = netBuffer:ReadInt()
    for i = 1, count do
        local riding_id_ = netBuffer:ReadInt()
        local status_ = netBuffer:ReadInt()
        local overdue_time_ = netBuffer:ReadInt()
    end
    --self.m_CurrentRideId = equiped_id_
end

function ComponentRide:OnModelLoadComplete()
    self:CheckStateRide()
end

function ComponentRide:GetOnRide(rideId)
    if self:CheckCanRide() == false then
        AlertController.ShowTips("当前状态不能上马")
        return
    end

    BattleMessage.SendGetOnRide(rideId)
end

function ComponentRide:GetOffRide()
    if self.m_CurrentRideId > 0 then
        BattleMessage.SendGetOffRide()
    end
end

function ComponentRide:OnGetOnRide(rideId)
    local owner = self.m_Owner
    self.m_CurrentRideId = rideId
    local config = MountConfig[rideId]
    if not config then
        Logger.LogError("[ComponentRide](OnGetOnRide)None config for rideId:" .. rideId)
        return
    end
    if owner == nil then
        return
    end

    if owner:CanChangeState(StateDefine.k_StateRide) == true then
        --Logger.LogInfo("Called owner.m_Core:ChangeToRide")
        owner.m_Core:ChangeToRide()
    elseif self.m_Owner:IsHero() then
        --Logger.LogInfo("Change failed, call send cancel")
        BattleMessage.SendGetOffRide()
    end
end

function ComponentRide:OnGetOffRide()
    if self.m_CurrentRideId < 0 then
        return
    end
    self.m_CurrentRideId = -1
    self.m_Owner.m_Core:StopRide()
end

function ComponentRide:CheckCanRide()
    local owner = self.m_Owner
    if self.m_IsRiding == true then
        return false
    end

    if owner == nil then
        return false
    end

    if owner:IsState(StateDefine.k_StateMove) then
        return false
    end
    if owner:CanChangeState(StateDefine.k_StateRide) == false then
        return false
    end

    return true
end

function ComponentRide:GetCurrentRideId()
    return self.m_CurrentRideId
end

function ComponentRide:CheckStateRide()
    local owner = self.m_Owner
    local stateRideParam = owner.m_StateComponent.m_StateRideParam
    if owner == nil then
        return
    end

    if owner:IsModelLoadFinish() == false then
        return
    end

    if owner:IsState(StateDefine.k_StateRide) == false then
        if stateRideParam.m_Mount == nil then
            return
        end
        ObjectManager.RemoveObject(stateRideParam.m_Mount:GetObjectID())
        stateRideParam.m_Mount = nil
    else
        if stateRideParam.m_IsInit == nil then
            local state = owner:GetState(StateDefine.k_StateRide)
            state.Init(owner, owner.m_StateComponent)
        end
    end
end

return ComponentRide
