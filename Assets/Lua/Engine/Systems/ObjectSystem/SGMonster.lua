---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/6/29 10:01

local MonsterConfig = MonsterConfig
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local Core_EntityUtility = SGEngine.Core.EntityUtility
local StateDefine = SGEngine.Core.StateDefine
local SGMonster = class("SGMonster", SGSprite)
SGMonster.m_ObjectType = ObjectTypeEnum.Monster

local k_WaveCheckOffset = 10

local k_BlueCampID = 4
local k_RedCampID = 5
local k_NameColorMap = {}
k_NameColorMap[k_BlueCampID] = UnityEngine.Color.green
k_NameColorMap[k_RedCampID] = UnityEngine.Color.red

function SGMonster:Ctor()
    SGMonster.__super.Ctor(self)
end

function SGMonster:Destroy()
    SGMonster.__super.Destroy(self)
    self.m_MoveComponent = nil
end

function SGMonster:Deserialize(netBuffer)
    SGMonster.__super.Deserialize(self, netBuffer)
    local endFlags = ComponentDefine.MonsterDeserializeEndFlag
    --- SER_FLAG_SPIRIT_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_SPIRIT_END) then
        Logger.LogError("[SGMonster](Deserialize)SGMonster Deserialize failed, endFlags.k_SER_FLAG_SPIRIT_END not match")
        return
    end

    local spawnID = netBuffer:ReadInt()
    self.m_MonsterID = netBuffer:ReadInt()
    local attackable = netBuffer:ReadUByte() == 1
    self:SetAttackable(attackable)

    self.m_IsSpawning = netBuffer:ReadUByte() == 1
    self.m_BaseScale = netBuffer:ReadFloat()
    self.m_WalkTurnSpeed = netBuffer:ReadFloat()

    self.m_OnlyAttackerID = netBuffer:ReadInt()
    self.m_ObjectName = netBuffer:ReadString()

    local isRobot = netBuffer:ReadByte() == 1
    if (isRobot) then
        local headIconID = netBuffer:ReadInt()
        local playerID = netBuffer:ReadInt()
    end
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PROP_END) then
        Logger.LogError("[SGMonster](Deserialize)SGMonster Deserialize failed, endFlags.k_SER_FLAG_PROP_END not match")
        return
    end

    --if is_mon_exists(type_id_)then
    --    SGameEngine.SGameLog.log_error(string.Format("monster info not Exist: 0", type_id_))
    --end

    self.m_StateComponent:Deserialize(netBuffer)
    ---SER_FLAG_STATE_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_STATE_END) then
        Logger.LogError("[SGMonster](Deserialize)SGMonster Deserialize failed, endFlags.k_SER_FLAG_STATE_END not match")
        return
    end
end

function SGMonster:SetModel(go, animationType)
    local sceneType = SceneManager.GetCurrentSceneType()
    if sceneType == SceneTypeEnum.Login or sceneType == SceneTypeEnum.Loading then
        self:SetJobSystemActive(false)
    end
    SGMonster.__super.SetModel(self, go, animationType)

    self:SetLayer("Monster")
end

function SGMonster:RegisterCommonComponents()
    SGMonster.__super.RegisterCommonComponents(self)
    self.m_MoveComponent = ComponentMoveMonster.New()
    self:AddComponent(self.m_MoveComponent, false)
    self.m_HUDComponent = ComponentHUD.New()
    self:AddComponent(self.m_HUDComponent, true)

    self.m_FootprintComponent = ComponentFootPrint.New()
    self:AddComponent(self.m_FootprintComponent, false)
end

function SGMonster:OnModelLoadComplete()
    SGMonster.__super.OnModelLoadComplete(self)
    local monsterCfg = MonsterConfig[self.m_MonsterID]
    if not monsterCfg then
        Logger.LogErrorFormat("(SGMonster):[OnModelLoadComplete]:None config for monsterID {0}", tostring(self.m_MonsterID))
        return
    end
    --self:SetCurrentMoveSpeed(monsterCfg.MoveSpeed)
    self:SetCurrentRotateSpeed(monsterCfg.TurnSpeed)

    local campConfig = CampConfig[self.m_CampId]

    if campConfig ~= nil then
       self:LoadLineRender(campConfig.LinerenderPath, function (linerender)
            local color = k_NameColorMap[campConfig.ID]
            self:SetLineRenderColor(color)
            if UNITY_EDITOR then
               linerender.transform:SetParent(ObjectManager.m_LineRenderGos)
            end
       end)


    end
end

function SGMonster:RegisterModelEvents()
    SGMonster.__super.RegisterModelEvents(self)
end

function SGMonster:AfterChangeScene(prev, next)
    ---这里是为了在Login切过来的时候重设一次jobactive,因为在login切主场景的时候怪物不清
    self:SetJobSystemActive(true)
end

-- C#状态改变回调.
function SGMonster:OnStateChanged(stateDefine, stateStageDefine)
    ---- 怪物进入站立状态坚持,是否停止AI
    --if stateDefine == 0 and stateStageDefine == 0 then
    --    if not self.m_Core:RendererVisible () and self:IsStayBirthPoint() and not self:HasAttackTarget() then
    --        self.m_Core:StopBehaviorTree ()
    --    end
    --end
end

-- 是否有攻击目标
function SGMonster:HasAttackTarget()
    return self.m_Core:GetBehaviourTreeVariableObject ("target") ~= nil
end

function SGMonster:SetAttackable(attackable)
    self.m_Attackable = attackable
end

function SGMonster:SetRadius(value)
    self.m_Core:SetRadius(value)
end

function SGMonster:SetHeight(value)
    self.m_Core:SetHeight(value)
end

function SGMonster:SetCenter(value)
    self.m_Core:SetCenter(value)
end

function SGMonster:Destroy()
    if self.m_DeadCallback then
        self.m_DeadCallback()
    end
    SGMonster.__super.Destroy(self)
end

function SGMonster:SetDeadCallback(callback)
    self.m_DeadCallback = callback
end

function SGMonster:GetDeadDissolveType()
    local monsterCfg = MonsterConfig[self.m_MonsterID]
    if monsterCfg then
        return monsterCfg.DeadDissolveType or 0
    end
    return nil
end

-- 初始化行为树参数(cs->lua)
function SGMonster:BehaviourInitParam()
    local config = MonsterConfig[self.m_MonsterID]
    if config == nil then
        return
    end

    self:SetBehaviourTreeVariable (
        {
            birthPos = self.birthPosition,
            maxChaseLength = 15,            -- 最大追击距离，超过立即返回
            searchInterval = 0,             -- 搜寻间隔
            attackRadius = 2,               -- 攻击范围
        }
    )
end

function SGMonster:GetSkillList()
    local config = MonsterConfig[self.m_MonsterID]
    if config == nil then
        return nil
    end
    return config.SkillList
end

function SGMonster:OnStateMoveGround(syncInfo)
    if not self.m_StateComponent then
        return
    end
    local moveState = self.m_StateComponent:GetState(StateDefine.k_StateMove)
    local OnStateMoveGround = moveState.OnStateMoveGround
    if OnStateMoveGround then
        OnStateMoveGround(self, syncInfo)
    end
end

function SGMonster:IsFriendly(otherSprite)
    local type = otherSprite.m_ObjectType
    if type == ObjectTypeEnum.Hero or type == ObjectTypeEnum.Player then
        return true
    end
    return false
end

function SGMonster:GetMoveSpeed()
    local config = MonsterConfig[self.m_MonsterID]
    if config == nil then
        return 0
    end
    return config.MoveSpeed
end

function SGMonster:GetRotateSpeed()
    local config = MonsterConfig[self.m_MonsterID]
    if config == nil then
        return 0
    end
    return config.TurnSpeed
end

function SGMonster:OnSyncStateStand(aniName, posX, posZ, turnType, targetId, targetAngle, turnSpeed)
    if not self.m_StateComponent then
        return
    end
    local stateIdleParam = self.m_StateComponent.m_StateIdleParam
    if not stateIdleParam then
        return
    end
    --local DebugDraw = SGEngine.Core.DebugDraw
    --local color = UnityEngine.Color.blue
    --local curPosition = Vector3.New(posX, self:GetPositionY(), posZ)
    --DebugDraw.CreateGo(curPosition, color, 0, "Stand")

    --stateIdleParam.m_Position = nil
    stateIdleParam.m_AnimationName = aniName
    stateIdleParam.m_TurnType = turnType
    stateIdleParam.m_TargetID = targetId
    stateIdleParam.m_TargetAngle = targetAngle
    stateIdleParam.m_TurnSpeed = turnSpeed

    local idleState = self.m_StateComponent:GetState(StateDefine.k_StateIdle)
    local OnStateIdle = idleState.OnStateIdle
    if OnStateIdle then
        OnStateIdle(self)
    end
end

function SGMonster:CheckAndAddMoveWave()
    local config = MonsterConfig[self.m_MonsterID]
    if config == nil then
        return
    end

    local position = self:GetPosition()
    Core_EntityUtility.CheckAndAddWave(position.x, position.y, position.z, k_WaveCheckOffset, config.WaveStrength)   
end

function SGMonster:GetNameColor()
    if self.m_CampId == nil then
        return nil
    end
    return k_NameColorMap[self.m_CampId]
end

return SGMonster