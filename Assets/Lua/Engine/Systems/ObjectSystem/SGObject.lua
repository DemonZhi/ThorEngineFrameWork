---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/6/29 10:00
---

local ObjectTypeEnum = ObjectTypeEnum
local BattleMessage = require("MainGame/Message/BattleMessage")
local ComponentContainer = require("Engine/Systems/ObjectSystem/Components/ComponentContainer")
local PoolingStrategyTypeEnum = require("Engine/Systems/ResourceSystem/PoolingStrategyTypeEnum")
---@class SGObject
local SGObject = class("SGObject")
SGObject.New = nil
SGObject.Create = nil
SGObject.m_ObjectType = ObjectTypeEnum.Object

function SGObject:Init()
    self.m_IsModelLoadFinish = false
    self.m_LayerName = nil
    local core = self.m_Core
    if core == nil then
        Logger.Error("[SGObject](Init):SGObject Init Failed.Core is Null")
        return
    end
    core:Init()
    self.m_ComponentContainer = ComponentContainer.New()
    self.m_ComponentContainer:Init()
    self:RegisterCommonComponents()
    self:RegisterCommonEvents()
end

function SGObject:OnModelLoadComplete()
    ---这里要前置置true逻辑
    self.m_IsModelLoadFinish = true
    self.m_ComponentContainer:OnModelLoadComplete()
    self:RegisterModelEvents()
end

function SGObject:AfterChangeScene(lastScene, nextScene)
end

function SGObject:RegisterCommonComponents()
end

function SGObject:RegisterCommonEvents()
end

function SGObject:RegisterModelEvents()
end

function SGObject:Destroy()
    -- Logger.LogInfo("[SGObject](Destroy)Obj:Destroy:%s,frameCount:%s",tostring(self:GetObjectID()), tostring(Time.frameCount))
    local core = self.m_Core
    core:Destroy()
    self.m_ComponentContainer:Destroy()
    self.m_ComponentContainer = nil
    self.m_Core = nil
end

function SGObject:SetAllMeshRenderActive(isActive)
    local core = self.m_Core
    if core == nil then
        return
    end
    core:SetAllMeshRenderActive(isActive)
end


function SGObject:SetObjectID(objectID)
    local core = self.m_Core
    if core == nil then
        return
    end
    self.m_ObjectID = objectID
    self.m_Core.ObjectID = objectID
end

function SGObject:GetObjectID()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    if self.m_ObjectID == nil then
        self.m_ObjectID = core.ObjectID
    end
    return self.m_ObjectID
end

function SGObject:SetModelID(modelID)
    self.m_ResourceId = modelID
    local core = self.m_Core
    if core == nil then
        return
    end
    core.ModelID = modelID
end

function SGObject:GetModelID()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core.ModelID
end

function SGObject:SetLayer(layerName)
    local core = self.m_Core
    if core == nil then
        return
    end
    self.m_LayerName = layerName
    core:SetLayer(layerName)
end

function SGObject:IsHero()
    local hero = ObjectManager.GetHero()
    if not hero then
        return false
    end
    return hero:GetObjectID() == self:GetObjectID()
end

function SGObject:IsMonster()
    return self.m_ObjectType == ObjectTypeEnum.Monster
end

function SGObject:IsPlayer()
    return self.m_ObjectType == ObjectTypeEnum.Player
end

function SGObject:IsValid()
    local core = self.m_Core
    if core == nil then
        return false
    end
    return core:IsValid()
end

function SGObject:IsServer()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core.IsServer
end

function SGObject:IsModelLoadFinish()
    return self.m_IsModelLoadFinish
end

function SGObject:IsPlayingAnimation(animationName, layer)
    if string.IsNullOrEmpty(animationName) then
        return false
    end
    layer = layer or 0
    if self.m_Core == nil or self.m_Core:Equals(nil) then
        return false
    end
    return self.m_Core:IsPlayingAnimation(animationName, layer)
end

function SGObject:GetTransform()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core.Transform
end

function SGObject:AddComponent(component, needUpdate)
    needUpdate = needUpdate or false
    if not component then
        Logger.LogError("[SGObject](AddComponent)Trying to add null component")
        return
    end
    if self.m_ComponentContainer:AddComponent(component, needUpdate) then
        component:Init(self)
        return true
    end
    return false
end

function SGObject:RemoveComponent(componentId)
    local component = self.m_ComponentContainer:RemoveComponent(componentId)
    if component then
        component:Destroy()
        return true
    end
    return false
end

function SGObject:GetComponent(componentId)
    return self.m_ComponentContainer:GetComponent(componentId)
end

function SGObject:SetComponentUpdateActive(componentId, active)
    self.m_ComponentContainer:SetComponentUpdateActive(componentId, active)
end

function SGObject:LoadModel(callBack)
    if self:IsValid() == false then
        Logger.LogErrorFormat("[SGObject](LoadModel)Check Object failed")
        return
    end

    local isPlayer = self:IsPlayer()
    local isHero = self:IsHero()
    --change scene
    if isPlayer and isHero then
        local sceneConfig = SceneConfig[self.m_SceneId]
        if not sceneConfig then
            Logger.LogErrorFormat("[SGObject](LoadModel)sceneID: {0} not found", self.m_SceneId)
            return
        end
        --Logger.LogInfo("[SGObject](LoadModel)Begin MainRoleChangeScene,frame:%s, objID:%s", tostring(Time.frameCount), self:GetObjectID())
        LoadingController.LoadScene(self.m_SceneId, sceneConfig.SceneType, nil, nil,
                function()
                    self:LoadModelCore(isPlayer, isHero, callBack)
                end,
                function()
                    SGEngine.Core.SceneWater.UnderEffectUsable = true
                end)
        ProcedureManager.ChangeProcedure(ProcedureTypeEnum.Main)
    else
        local loadModelQueueComponent = self.m_LoadModelQueueComponent
        if loadModelQueueComponent then
            loadModelQueueComponent:LoadModel(isPlayer, isHero, callBack)
        else
            self:LoadModelCore(isPlayer, isHero, callBack)
        end
    end
end

function SGObject:LoadModelCore(isPlayer, isHero, callBack)
    --Logger.LogInfo("LoadModelCore:%s, frame:%s", self:GetObjectID(), Time.frameCount)
    local modelId = self:GetModelID()
    local config = ModelConfig[modelId]
    if not config then
        Logger.LogErrorFormat("[SGObject](LoadModelCore)Create Object failed, model config not found, model id: {0}", modelId)
        return nil
    end

    local modelAddress = config.Address
    local animationType = config.AnimationType
    if isPlayer and not isHero and not string.IsNullOrEmpty(config.LODAddress) then
        modelAddress = config.LODAddress
    end
    ResourceManager.InstantiateAsync(modelAddress, function(go)
        local loadModelQueueComponent = self.m_LoadModelQueueComponent
        if loadModelQueueComponent then
            loadModelQueueComponent:OnLoaded()
        end
        if not go then
            Logger.LogErrorFormat("[SGObject](LoadModelCore)Instantiate model failed, model id: {0}", modelId)
            return
        end

        if not self:IsValid() then
            Logger.LogDebugFormat("[SGObject](LoadModelCore)Instantiate model failed, self:IsValid() false model id: {0}", modelId)
            ResourceManager.ReleaseInstance(go)
            return
        end

        if isHero then
            local isFirstTimeLoaded = self.m_IsFirstTimeLoaded
            BattleMessage.SendHeroAddSuccess(isFirstTimeLoaded)
            self.m_IsFirstTimeLoaded = false
            ActionController.RefreshRole()
        end
        --Logger.LogInfo("SetModel:%s, frame:%s", self:GetObjectID(), Time.frameCount)
        self:SetModel(go, animationType)
        self:SetModelPath(config.Address)

        if callBack then
            callBack(self)
        end

        if self.OnModelLoadComplete then
            self:OnModelLoadComplete()
        end
    end, PoolingStrategyTypeEnum.DontDestroyOnLoad)
end

function SGObject:SetModel(gameObject, animationType)
    local core = self.m_Core
    if core == nil then
        return nil
    end
    animationType = animationType or 0
    self.m_InitScale = gameObject.transform.localScale
    return core:SetModel(gameObject, animationType)
end

function SGObject:SetModelPath(path)
    local core = self.m_Core
    if core == nil then
        return
    end
    core:SetModelPath(path)
end

function SGObject:GetModel()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core:GetModel()
end

function SGObject:GetPosition()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core:GetPosition()
end

function SGObject:GetPositionXYZ()
    local core = self.m_Core
    if core == nil then
        return nil, nil, nil
    end
    return core:GetPositionXYZ(nil, nil, nil)
end

function SGObject:GetPositionY()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core:GetPositionY()
end

function SGObject:SetPosition(position, needFixY)
    if not needFixY then
        needFixY = false
    end
    local core = self.m_Core
    if core == nil then
        return
    end
    --Logger.LogInfo("[SGObject](SetPosition)SetPosition:{%f},{%f},{%f}, needFixY:%s, %s, objId: %s", position.x, position.y, position.z, needFixY, Time.frameCount, self:GetObjectID())
    return core:SetPosition(position, needFixY)
end

function SGObject:SetPositionXYZ(positionX, positionY, positionZ, needFixY)
    if not needFixY then
        needFixY = false
    end
    local core = self.m_Core
    if core == nil then
        return
    end
    --Logger.LogInfo("[SGObject](SetPosition)SetPosition:{%f},{%f},{%f}, needFixY:%s, %s, objId: %s", positionX, positionY, positionZ, needFixY, Time.frameCount, self:GetObjectID())
    return core:SetPositionXYZ(positionX, positionY, positionZ, needFixY)
end

function SGObject:FixPositionY()
    local core = self.m_Core
    if core == nil then
        return
    end
    --Logger.LogInfo("[SGObject](FixPositionY)FixPositionY: %s", Time.frameCount)
    core:FixPositionY()
end

function SGObject:SetRotation(rotation)
    local core = self.m_Core
    if core == nil then
        return
    end
    return core:SetRotation(rotation)
end

function SGObject:GetRotation()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core:GetRotation()
end

function SGObject:GetRotationXYZW()
    local core = self.m_Core
    if core == nil then
        return nil, nil, nil, nil
    end
    return core:GetRotationXYZW(nil, nil, nil, nil)
end

function SGObject:SetAngle(angle)
    --Logger.LogInfo("[SGObject](SetAngle)SGObject:SetAngle: %s", angle)
    local core = self.m_Core
    if core == nil then
        return
    end
    return core:SetAngle(angle)
end

function SGObject:SetAngleXYZ(angleX, angleY, angleZ)
    --Logger.LogInfo("[SGObject](SetAngleXYZ)SGObject:SetAngle:angleX:%d, angleY:%d, angleZ:%d", angleX, angleY, angleZ)
    local core = self.m_Core
    if core == nil then
        return
    end
    return core:SetAngleXYZ(angleX, angleY, angleZ)
end

function SGObject:GetAngleXYZ(precised)
    precised = precised or false
    local x = self:GetAngleX(precised)
    local y = self:GetAngle(precised)
    local z = self:GetAngleZ(precised)
    return x, y, z
end

function SGObject:GetAngle(precised)
    local core = self.m_Core
    if core == nil then
        return nil
    end

    precised = precised or false
    return core:GetAngle(precised)
end

function SGObject:GetAngleX(precised)
    local core = self.m_Core
    if core == nil then
        return nil
    end

    precised = precised or false
    return core:GetAngleX(precised)
end

function SGObject:GetAngleZ(precised)
    local core = self.m_Core
    if core == nil then
        return nil
    end

    precised = precised or false
    return core:GetAngleZ(precised)
end

function SGObject:FixAngleToSyncPrecision()
    local core = self.m_Core
    if core == nil then
        return nil
    end

    core:FixAngleToSyncPrecision()
end

function SGObject:SetScale(scale)
    local core = self.m_Core
    if core == nil then
        return
    end
    core:SetScale(scale)
end

function SGObject:GetForward()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core:GetForward()
end

function SGObject:SetForward(forward)
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core:SetForward(forward)
end

function SGObject:LookAtTargetWithID(targetId)
    if not targetId then
        return
    end
    self.m_Core:LookAtTargetWithID(targetId)
end

function SGObject:LookAtPosition(position)
    local core = self.m_Core
    if core == nil then
        return
    end
    return core:LookAtPosition(position)
end

function SGObject:Turn2TargetWithID(targetId, speed)
    local core = self.m_Core
    if core == nil then
        return
    end
    return core:Turn2TargetWithID(targetId, speed)
end

function SGObject:Turn2Angle(angle, speed)
    local core = self.m_Core
    if core == nil then
        return
    end
    return core:Turn2Angle(angle, speed)
end

function SGObject:PlayAnimation(aniName, layer, crossFadeTime, offsetTime, callBack, playSpeed)
    layer = layer or 0
    playSpeed = playSpeed or 1.0
    crossFadeTime = crossFadeTime or 0.1
    offsetTime = offsetTime or 0
    --if self:IsHero() then
    --    Logger.LogInfo("[SGObject](PlayAnimation):obj:{%s},name:{%s},layer:{%d}, crossFadeTime:{%f}, offsetTime:{%f}, frameCount:{%d}", self:GetObjectID(), aniName, layer, crossFadeTime, offsetTime, Time.frameCount)
    --end
    if string.IsNullOrEmpty(aniName) then
        Logger.Error("[SGObject](PlayAnimation):Try to play empty anim")
        return
    end
    local core = self.m_Core
    if core == nil then
        return
    end

    return core:PlayAnimation(aniName, layer, crossFadeTime, offsetTime, callBack, playSpeed)
end

function SGObject:UnRegAnimationCallBack(aniName)
    local core = self.m_Core
    if core == nil then
        return
    end
    return core:UnRegAnimationEvent(aniName)
end

function SGObject:GetHeight()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core:GetHeight()
end

function SGObject:GetRadius()
    local core = self.m_Core
    if core == nil then
        return nil
    end
    return core:GetRadius()
end

function SGObject:Update(deltaTime)
    self.m_ComponentContainer:Update(deltaTime)
end

function SGObject:LateUpdate()
    self.m_ComponentContainer:LateUpdate()
end

function SGObject:ChangeModel(modelAddress, callBack)
    ResourceManager.InstantiateAsync(modelAddress, function(go)
        if not go then
            Logger.LogErrorFormat("[SGObject](LoadModelCore)Instantiate model failed, model id: {0}", modelAddress)
            return
        end

        if not self:IsValid() then
            ResourceManager.ReleaseInstance(go)
            return
        end

        self:ResetModel(go)
        self:SetModelPath(modelAddress)
        self:ResetAllComponents()
        if callBack then
            callBack()
        end
    end, PoolingStrategyTypeEnum.DontDestroyOnLoad)
end

function SGObject:ResetModel(gameObject)
    local core = self.m_Core
    if core == nil then
        return
    end
    return core:ResetModel(gameObject)
end

function SGObject:ResetAllComponents()
    self.m_Core:ResetAllComponents()
    self.m_ComponentContainer:ResetAllComponents()
end

function SGObject:ChangeModelAndSkin(modelId, bodyName, skinName, callBack)
    if self:ChangeModelAndSkinCore(modelId, bodyName, skinName, callBack) == true then
        BattleMessage.SendChangeModelAndSkin(self:GetObjectID(), modelId, bodyName, skinName)
    end
end

function SGObject:ChangeModelAndSkinCore(modelId, bodyName, skinName, callBack)
    local core = self.m_Core
    if core == nil then
        return
    end
    if modelId then
        local config = ModelConfig[modelId]
        if config == nil then
            return false
        end
        self.m_ResourceId = modelId
        self:SetModelID(modelId)
        if config.Address == nil then
            return false
        end
        core.AnimationType = config.AnimationType
        self:ChangeModel(config.Address, function()
            self:SetModelPath(config.Address)
            self:SetLayer(self.m_LayerName)
            if not string.IsNullOrEmpty(skinName) and not string.IsNullOrEmpty(bodyName) then
                self:ChangeSkin(bodyName, skinName, callBack)
            else
                if callBack ~= nil then
                    callBack(nil, false)
                end
            end
        end)
        return true
    end
    return false
end

function SGObject:IsFinishDelayRemove()
    return true
end

function SGObject:GetTimeBetweenAnimationEvent(aniName, startEvent, endEvent)
    return self.m_Core:GetTimeBetweenAnimationEvent(aniName, startEvent, endEvent)
end

function SGObject:IsAlmostOnGround(distance)
    if distance == nil then
        distance = 0
    end
    return self.m_Core:IsAlmostOnGround(distance)
end

function SGObject:GetCurrentPlaySpeed()
    return 1
end

return SGObject