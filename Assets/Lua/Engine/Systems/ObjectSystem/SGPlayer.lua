---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/6/29 10:01
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
local MoveType = ComponentDefine.MoveType
local SyncConsts = ComponentDefine.SyncConsts
local StateDefine = SGEngine.Core.StateDefine
local AnimationEventDefines = SGEngine.Core.AnimationEventDefines
local Core_EntityUtility = SGEngine.Core.EntityUtility
local k_WaveCheckOffset = 10
local SGPlayer = class("SGPlayer", SGSprite)
SGPlayer.m_ObjectType = ObjectTypeEnum.Player

function SGPlayer:Ctor()
    SGPlayer.__super.Ctor(self)
end

function SGPlayer:Init(position, angle, scale)
    SGPlayer.__super.Init(self, position, angle, scale)
    --todo 临时把jobid设为1
    self.m_JobId = 1
end

function SGPlayer:Destroy()
    SGPlayer.__super.Destroy(self)
    self.m_MoveComponent = nil
    self.m_SkillComboComponent = nil
    self.m_IKComponent = nil
    self.m_SkillTargetComponent = nil
    self.m_RideComponent = nil
    self.m_AvatarComponent = nil
    self.m_StateCheckerComponent = nil
    self.m_FaceMakeUpComponent = nil
    self.m_BagComponent = nil
    self.m_QuestComponent = nil
    self.m_FootprintComponent = nil
end

function SGPlayer:Deserialize(netBuffer)
    local endFlags = ComponentDefine.PlayerDeserializeEndFlag
    ---player -> sprite -> ctrl
    SGPlayer.__super.Deserialize(self, netBuffer)
    --- do some common deserialization between 3rd & hero
    --- SER_FLAG_SPIRIT_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_SPIRIT_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_SPIRIT_END not match")
        return
    end

    --- unserialize_player_attr
    self.m_AttrComponent:DeserializePlayerAttr(netBuffer)
    --- SER_FLAG_PROP_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PROP_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PROP_END not match")
        return
    end

    ---ext_param_COM.unserialize();
    self.m_AttrComponent:DeserializeExtendParam(netBuffer)
    ---SER_FLAG_EXT_PARAM_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_EXT_PARAM_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_EXT_PARAM_END not match")
        return
    end

    ---unserialize_state();
    self.m_StateComponent:Deserialize(netBuffer)
    ---SER_FLAG_STATE_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_STATE_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_STATE_END not match")
        return
    end

    ---morph_COM.unserialize();
    self.m_FaceMakeUpComponent:Deserialize(netBuffer)
    ---SER_FLAG_PLAYER_MORPH_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_MORPH_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_MORPH_END not match")
        return
    end

    ---avatar_COM.unserialize();
    self.m_AvatarComponent:Deserialize(netBuffer)
    ---SER_FLAG_PLAYER_AVATAR_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_AVATAR_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_AVATAR_END not match")
        return
    end

    ---team_COM.unserialize();
    self:DeserializeTeam(netBuffer)
    ---SER_FLAG_PLAYER_TEAM_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_TEAM_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_TEAM_END not match")
        return
    end

    ---riding_COM.unserialize();
    self.m_RideComponent:Deserialize(netBuffer)
    ---SER_FLAG_PLAYER_RIDING_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_RIDING_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_RIDING_END not match")
        return
    end

    ---avatar_COM.unserialize_equip_ids();
    self.m_AvatarComponent:DeserializeEquip(netBuffer)
    ---SER_FLAG_PLAYER_EQUIP_IDS_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_EQUIP_IDS_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_EQUIP_IDS_END not match")
        return
    end

    if self:IsHero() == true then
        ---do some hero-only deserialization
        self:DeserializeHero(netBuffer)
    end
end

function SGPlayer:DeserializeHero(netBuffer)
    local endFlags = ComponentDefine.PlayerDeserializeEndFlag
    ---unserialize_hero_attr();
    self.m_AttrComponent:DeserializeHeroAttr(netBuffer)
    ---SER_FLAG_HERO_ATTR_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_HERO_ATTR_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_HERO_ATTR_END not match")
        return
    end

    ---player_mail_COM.unserialize();
    self:DeserializeMail(netBuffer)
    ---SER_FLAG_PLAYER_MAIL_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_MAIL_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_MAIL_END not match")
        return
    end

    ---player_time_COM.unserialize();
    self:DeserializePlayerTime(netBuffer)
    ---SER_FLAG_PLAYER_TIME_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_TIME_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_TIME_END not match")
        return
    end

    ---bag_COM.unserialize();
    self.m_BagComponent:Deserialize(netBuffer)
    ---SER_FLAG_BAG_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_BAG_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_BAG_END not match")
        return
    end

    ---warehouse_COM.unserialize();
    self.m_BagComponent:DeserializeWareHouse(netBuffer)
    ---SER_FLAG_WAREHOUSE_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_WAREHOUSE_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_WAREHOUSE_END not match")
        return
    end

    ---quest_COM.unserialize();
    self.m_QuestComponent:Deserialize(netBuffer)
    ---SER_FLAG_PLAYER_QUEST_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_QUEST_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_QUEST_END not match")
        return
    end

    ---skill_config_COM.unserialize();
    self.m_SkillComponent:DeserializeSkillConfig(netBuffer)
    ---SER_FLAG_SKILL_CONFIG_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_SKILL_CONFIG_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_SKILL_CONFIG_END not match")
        return
    end

    ---skill_info_COM.unserialize();
    self.m_SkillComponent:DeserializeSkillInfo(netBuffer)
    ---SER_FLAG_SKILL_INFO_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_SKILL_INFO_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_SKILL_INFO_END not match")
        return
    end

    ---riding_COM.unserialize_active();
    self.m_RideComponent:DeserializeActive(netBuffer)
    ---SER_FLAG_ACTIVE_PLAYER_RIDING_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_ACTIVE_PLAYER_RIDING_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_ACTIVE_PLAYER_RIDING_END not match")
        return
    end

    ---prop_point_COM.unserialize();
    self.m_AttrComponent:DeserializePropPoint(netBuffer)
    ---SER_FLAG_PLAYER_PROP_POINT_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_PROP_POINT_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_PLAYER_PROP_POINT_END not match")
        return
    end

    ---equip_make_COM.unserialize();
    local num = netBuffer:ReadUByte()
    for i = 1, num do
        local level = netBuffer:ReadUByte()
        local value = netBuffer:ReadInt()
    end
    ---SER_FLAG_EQUIP_MAKE_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_EQUIP_MAKE_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_EQUIP_MAKE_END not match")
        return
    end

    ---ChatMng.Instance.unserialize();
    self:DeserializeChat(netBuffer)
    ---SER_FLAG_CHAT_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_CHAT_END) then
        Logger.LogError("[SGPlayer](Deserialize)SGPlayer Deserialize failed, endFlags.k_SER_FLAG_CHAT_END not match")
        return
    end
end

function SGPlayer:OnReconnect(netBuffer)
    local endFlags = ComponentDefine.PlayerDeserializeEndFlag
    --- unserialize_player_attr
    self.m_AttrComponent:DeserializePlayerAttr(netBuffer)
    --- SER_FLAG_PROP_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PROP_END) then
        return
    end

    ---ext_param_COM.unserialize();
    self.m_AttrComponent:DeserializeExtendParam(netBuffer)
    ---SER_FLAG_EXT_PARAM_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_EXT_PARAM_END) then
        return
    end

    ---unserialize_state();
    self.m_StateComponent:Deserialize(netBuffer)
    ---SER_FLAG_STATE_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_STATE_END) then
        return
    end

    ---unserialize_hero_attr();
    self.m_AttrComponent:DeserializeHeroAttr(netBuffer)
    ---SER_FLAG_HERO_ATTR_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_HERO_ATTR_END) then
        return
    end

    ---player_mail_COM.unserialize();
    self:DeserializeMail(netBuffer)
    ---SER_FLAG_PLAYER_MAIL_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_MAIL_END) then
        return
    end

    ---player_time_COM.unserialize();
    self:DeserializePlayerTime(netBuffer)
    ---SER_FLAG_PLAYER_TIME_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_TIME_END) then
        return
    end

    ---morph_COM.unserialize();
    self.m_FaceMakeUpComponent:Deserialize(netBuffer)
    ---SER_FLAG_PLAYER_MORPH_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_MORPH_END) then
        return
    end

    ---bag_COM.unserialize();
    self.m_BagComponent:Deserialize(netBuffer)
    ---SER_FLAG_BAG_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_BAG_END) then
        return
    end

    ---warehouse_COM.unserialize();
    self.m_BagComponent:DeserializeWareHouse(netBuffer)
    ---SER_FLAG_WAREHOUSE_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_WAREHOUSE_END) then
        return
    end

    ---avatar_COM.unserialize();
    self.m_AvatarComponent:Deserialize(netBuffer)
    ---SER_FLAG_PLAYER_AVATAR_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_AVATAR_END) then
        return
    end

    ---quest_COM.unserialize();
    self.m_QuestComponent:Deserialize(netBuffer)
    ---SER_FLAG_PLAYER_QUEST_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_QUEST_END) then
        return
    end

    ---riding_COM.unserialize();
    self.m_RideComponent:Deserialize(netBuffer)
    ---SER_FLAG_PLAYER_RIDING_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_RIDING_END) then
        return
    end

    ---riding_COM.unserialize_active();
    self.m_RideComponent:DeserializeActive(netBuffer)
    ---SER_FLAG_ACTIVE_PLAYER_RIDING_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_ACTIVE_PLAYER_RIDING_END) then
        return
    end

    ---prop_point_COM.unserialize();
    self.m_AttrComponent:DeserializePropPoint(netBuffer)
    ---SER_FLAG_PLAYER_PROP_POINT_END
    if not self:CheckSerialize(netBuffer, endFlags.k_SER_FLAG_PLAYER_PROP_POINT_END) then
        return
    end

    ---equip_make_COM.unserialize();
    local num = netBuffer:ReadUByte()
    for i = 1, num do
        local level = netBuffer:ReadUByte()
        local value = netBuffer:ReadInt()
    end

    ---ChatMng.Instance.unserialize();
    self:DeserializeChat(netBuffer)
end

function SGPlayer:DeserializeTeam(netBuffer)
    local hasTeam = netBuffer:ReadUByte() ~= 0

    if not hasTeam then
        return
    end

    local team_server_id_ = netBuffer:ReadInt()
    local team_id_ = netBuffer:ReadInt()
    local team_name_ = netBuffer:ReadString()
    local team_leader_id_ = netBuffer:ReadInt()
end

function SGPlayer:DeserializeMail(netBuffer)
    ---Lets prey for not having any mail
    local mail_count = netBuffer:ReadUByte()
    for i = 1, mail_count do

    end
end

function SGPlayer:DeserializeChat(netBuffer)
    ---Lets prey for not having any chat
    local count = netBuffer:ReadInt()
    for i = 1, count do

    end
end

function SGPlayer:DeserializePlayerTime(netBuffer)
    local count = netBuffer:ReadInt()
    for i = 1, count do
        local id = netBuffer:ReadInt()
        local val = netBuffer:ReadInt()
    end
end

function SGPlayer:LoadModel(callBack)
    SGPlayer.__super.LoadModel(self)
    self:LoadCharacterConfig()
end

function SGPlayer:LoadCharacterConfig()
    local config = self:GetCharacterConfig()
    if config == nil then
        Logger.Error("[SceneManager.OnCreateObject]CreateServerObject Nil Config. objectId:{%d}, resourceId:{%d}")
        return
    end
    self.m_CharacterConfig = config
    local moveSpeed = config.MoveSpeed
    local rotateSpeed = config.RotateSpeed
    local roleFallGravity = config.FallGravity
    local roleFallHeight = config.FallHeight
    local sprintSpeed = config.SprintSpeed
    local sprintRotateSpeed = config.SprintRotateSpeed

    local attributeDefine = ComponentDefine.AttributeDefine
    self.m_AttrComponent:SetAttribute(attributeDefine.k_FallHeight, roleFallHeight)
    self.m_AttrComponent:SetAttribute(attributeDefine.k_FallGravity, roleFallGravity)
    self.m_AttrComponent:SetAttribute(attributeDefine.k_MoveSpeed, moveSpeed)
    self.m_AttrComponent:SetAttribute(attributeDefine.k_RotateSpeed, rotateSpeed)
    self.m_AttrComponent:SetAttribute(attributeDefine.k_SprintSpeed, sprintSpeed)
    self.m_AttrComponent:SetAttribute(attributeDefine.k_SprintRotateSpeed, sprintRotateSpeed)
    self:SetCurrentMoveSpeed(moveSpeed)
    self:SetCurrentRotateSpeed(rotateSpeed)
    if self:IsHero() then
        self.m_Core:SetAnchorHeight(config.CameraAnchorHeight)
    end
end

function SGPlayer:SetModel(go, animationType)
    SGPlayer.__super.SetModel(self, go, animationType)
    if self:IsHero() then
        self:SetLayer("Hero")
        --self:AddBehaviorTree("BehaviorMainRole", false)
    else
        self:SetLayer("Player")
    end
end

function SGPlayer:OnModelLoadComplete()
    local position = self:GetPosition()

    if SceneManager.IsChangingScene() == false and self:IsState(StateDefine.k_StateIdle) and self:IsHero() == false then
        self:SetPosition(position, true)
        self:ResetCamera()
    end

    local stateSwimParam = self.m_StateComponent.m_StateSwimParam
    local swimHangPoint = self:GetBodyPartTransform(StateConsts.k_SwimPoint)
    if swimHangPoint ~= nil then
        stateSwimParam.m_InWaterOffset = swimHangPoint.position.y - position.y
    else
        stateSwimParam.m_InWaterOffset = 0
    end

    SGPlayer.__super.OnModelLoadComplete(self)
end

function SGPlayer:AfterChangeScene(lastScene, nextScene)
    if self:IsModelLoadFinish() == false then
        return
    end

    if self:IsState(StateDefine.k_StateIdle) == true then
        self:SetPosition(self:GetPosition(), true)
    end

    if self:IsHero() then
       self:ResetCamera()
    end
end

function SGPlayer:ResetCamera()
    --清理注视数据
    if self.m_StateComponent.m_IsCloseup then
       self.m_StateComponent.m_IsCloseup = false
       self.m_StateComponent.m_IsCloseupMotorActive = false
    end
    --重置相机ZoomScale为1
    self:CameraControllerResetZoomScale()
    --设置相机参数
    local sceneID = SceneManager.GetCurrentSceneID()
    self:SetCameraDataBySceneID(sceneID)
end

function SGPlayer:RegisterCommonComponents()
    SGPlayer.__super.RegisterCommonComponents(self)
    local isHero = self:IsHero()
    if isHero then
        self.m_MoveComponent = ComponentMoveHero.New()
        self.m_SkillComboComponent = ComponentSkillCombo.New()
        self:AddComponent(self.m_SkillComboComponent, true)
        self.m_SkillTargetComponent = ComponentSkillTarget.New()
        self:AddComponent(self.m_SkillTargetComponent, true)
        self.m_IKComponent = ComponentIK.New()
        self:AddComponent(self.m_IKComponent, true)
        self.m_FootprintComponent = ComponentFootPrint.New()
        self:AddComponent(self.m_FootprintComponent, false)
    else
        self.m_MoveComponent = ComponentMove3rd.New()
    end
    self:AddComponent(self.m_MoveComponent, false)
    self.m_BagComponent = ComponentBag.New()
    self:AddComponent(self.m_BagComponent, false)
    self.m_QuestComponent = ComponentQuest.New()
    self:AddComponent(self.m_QuestComponent, false)
    self.m_FaceMakeUpComponent = ComponentFaceMakeUp.New()
    self:AddComponent(self.m_FaceMakeUpComponent, false)

    self.m_RideComponent = ComponentRide.New()
    self:AddComponent(self.m_RideComponent, false)
    self.m_AvatarComponent = ComponentAvatar.New()
    self:AddComponent(self.m_AvatarComponent, false)
    self.m_StateCheckerComponent = ComponentStateChecker.New()
    self:AddComponent(self.m_StateCheckerComponent, true)
    if isHero then
        self.m_StateCheckerComponent:SetFallCheckActive(true)
        self.m_StateCheckerComponent:SetSwimCheckActive(true)
    else
        self.m_StateCheckerComponent:SetSwimCheckActive(false)
    end
    self.m_HUDComponent = ComponentHUD.New()
    self:AddComponent(self.m_HUDComponent, true)
end

function SGPlayer:SetLookAtTargetMotorTarget(target)
    return self.m_Core:SetLookAtTargetMotorTarget(target)
end

function SGPlayer:ActivateMotorWithName(motorName)
    --Logger.LogInfo("ActivateMotorWithName:"..motorName)
    self.m_Core:ActivateMotorWithName(motorName)
end

function SGPlayer:ActivateMotorWithIndex(index)
    --Logger.LogInfo("ActivateMotorWithIndex:"..tostring(index))
    if self.m_Core == nil then
       return
    end
    self.m_Core:ActivateMotorWithIndex(index)
end

function SGPlayer:GetActiveMotorName()
    return self.m_Core:GetActiveMotorName()
end

function SGPlayer:GetActiveMotorIndex()
    return self.m_Core:GetActiveMotorIndex()
end

function SGPlayer:SetAnchorOffset(offset)
    ---@param offset Vector3
    self.m_Core:SetAnchorOffset(offset)
end

function SGPlayer:GetAnchorOffset()
    return self.m_Core:GetAnchorOffset()
end

function SGPlayer:SetCameraFov(fov)
    self.m_Core:SetCameraFov(fov)
end

function SGPlayer:GetCameraFov()
    return self.m_Core:GetCameraFov()
end

function SGPlayer:SetCameraDistance(distance)
    self.m_Core:SetCameraDistance(distance)
end

function SGPlayer:GetCameraDistance()
    return self.m_Core:GetCameraDistance()
end

function SGPlayer:SetCameraOrbitRadius(orbitRadius)
    self.m_Core:SetOrbitRadius(orbitRadius)
end

function SGPlayer:GetCameraOrbitRadius()
    return self.m_Core:GetCameraOrbitRadius()
end

function SGPlayer:SetCameraRotation(angle)
    self.m_Core:SetCameraRotation(angle)
end

function SGPlayer:GetCameraRotation()
    return self.m_Core:GetCameraRotation()
end

function SGPlayer:EquipGameObject(equipPartName, equipName, callBack)
    self.m_Core:EquipGameObject(equipPartName, equipName, callBack)
end

function SGPlayer:UnEquipGameObject(equipPartName)
    self.m_Core:UnEquipGameObject(equipPartName)
end

function SGPlayer:GetEquipGameobject(equipPartName)
    return self.m_Core:GetEquipGameobject(equipPartName)
end

function SGPlayer:PlayEquipAnimation(equipPartName, animName, crossFade)
    self.m_Core:PlayEquipAnimation(equipPartName, animName, crossFade)
end

function SGPlayer:CombineSkin()
    self.m_Core:CombineSkin()
end

function SGPlayer:ReverseCombineSkin()
    self.m_Core:ReverseCombineSkin()
end

function SGPlayer:EquipTorch(isEquip)
    if self.m_IsEquipTorch == isEquip then
        return
    end
    self.m_IsEquipTorch = isEquip

    if self:IsState(StateDefine.k_StateIdle) then
        self.m_Core:ChangeToIdle()
    elseif self:IsState(StateDefine.k_StateMove) then
        self.m_Core:ChangeToMove()
    end
end

function SGPlayer:ChangeToDodge()
    local dodgeTime = 1
    if self:IsHero() then
        if self:IsState(StateDefine.k_StateSkill) then
            local skill = self.m_SkillComponent:GetCurrentSkill()
            if skill:IsBreakable() == false then
                return
            end
        end
        local moveType = self.m_MoveComponent:GetCurrentMoveType()
        self.m_StateComponent.m_StateDodgeParam.m_IsInitSprint = (moveType == MoveType.Sprint or moveType == MoveType.SprintTurn)
    end
    if self:ContainAnimation(StateConsts.k_DodgeAnimationName) then
        dodgeTime = self:GetTimeBetweenAnimationEvent(StateConsts.k_DodgeAnimationName, AnimationEventDefines.k_EventFrontSwing, AnimationEventDefines.k_EventRearSwing)
    end
    if dodgeTime <= 0 then
        dodgeTime = 1
    end
    local acceleration = StateDodge.k_DodgeSpeed / dodgeTime
    self.m_Core:ChangeToDodge(acceleration)
end

function SGPlayer:ChangeToSwim()
    --Logger.LogInfo("ChangeToSwim")
    self.m_Core:ChangeToSwim()
end

function SGPlayer:SwimSprint()
    if self:IsState(StateDefine.k_StateSwim) == false then
        return
    end
    local stateSwim = self:GetState(StateDefine.k_StateSwim)
    if stateSwim.SwimSprint then
        stateSwim.SwimSprint(self)
    end
end

function SGPlayer:SwimDive()
    if self:IsState(StateDefine.k_StateSwim) == false then
        return
    end
    local stateSwim = self:GetState(StateDefine.k_StateSwim)
    if stateSwim.SwimDive then
        stateSwim.SwimDive(self, true)
    end
end

function SGPlayer:OnStateMoveGround(syncInfo)
    if not self.m_StateComponent then
        return
    end
    local moveState = self.m_StateComponent:GetState(StateDefine.k_StateMove)
    local OnStateMoveGround = moveState.OnStateMoveGround
    if OnStateMoveGround then
        OnStateMoveGround(self, syncInfo)
    end
end

function SGPlayer:IsFriendly(otherSprite)
    if otherSprite.m_ObjectType == ObjectTypeEnum.Monster then
        return true
    end
    return false
end

function SGPlayer:BeginWet(fadeInTime, wetness)
    local core = self.m_Core
    if not core then
        return
    end
    fadeInTime = fadeInTime or tonumber(GameSettings["RoleWetFadeinTime"].Value)
    wetness = wetness or tonumber(GameSettings["RoleWetness"].Value)
    core:BeginWet(fadeInTime, wetness)
end

function SGPlayer:EndWet(fadeoutTime)
    local core = self.m_Core
    if not core then
        return
    end
    fadeoutTime = fadeoutTime or tonumber(GameSettings["RoleWetFadeoutTime"].Value)
    core:EndWet(fadeoutTime)
end

function SGPlayer:CheckAndAddMoveWave()
    local position = self:GetPosition()
    Core_EntityUtility.CheckAndAddWave(position.x, position.y, position.z, k_WaveCheckOffset, self.m_CharacterConfig.JumpWaveStrength)
end

--region IK
function SGPlayer:SetLookAtSGSprite(target)
    self.m_IKComponent:LookAtSGSprite(target)
end
--endregion

-- 换部件
function SGPlayer:ChangeSubpart(subpartType, resName, attachPointPath, callBack)
    self.m_AvatarComponent:ChangeSubpart(subpartType, resName, attachPointPath, callBack)
end

function SGPlayer:ChangeFaceMakeup(partName, index)
    self.m_Core:ChangeFaceMakeup(partName, index)
end

function SGPlayer:OnSkillButtonUp()
    self.m_StateComponent:OnSkillButtonUp()
end

function SGPlayer:OnSkillButtonMove(angle)
    self.m_StateComponent:OnSkillButtonMove(angle)
end

function SGPlayer:OnSkillButtonDown(angle)
    self.m_StateComponent:OnSkillButtonDown(angle)
end

----------------------------------------------------------------------------角色同步--------------------------------------------------
function SGPlayer:OnSyncStateJump(position, angle, jumpType, moveSpeed, peakTime, jumpHeight)
    self:SetPosition(position)
    self:SetAngle(angle)
    local jumpState = self:GetState(StateDefine.k_StateJump)
    if jumpState ~= nil and jumpState.OnSyncStateJump ~= nil then
        jumpState.OnSyncStateJump(self, jumpType, moveSpeed, peakTime, jumpHeight)
    end
end

function SGPlayer:OnSyncStateJumpStop(position, angle)
    if self:IsState(StateDefine.k_StateJump) == true then
        local stateJump = self:GetState(StateDefine.k_StateJump)
        if stateJump then
            stateJump.OnSyncStateJumpStop(self, position, angle)
        end
    else
        local currentPos = self:GetPosition()
        if Vector3.Distance(currentPos, position) > SyncConsts.k_MinDistanceToMove then
            self.m_MoveComponent:Move(position, angle)
        else
            self:SetPosition(position)
            self:SetAngle(angle)
        end
    end
end

function SGPlayer:OnSyncStateDodge(positionX, positionY, positionZ, angle)
    self:SetPositionXYZ(positionX, positionY, positionZ)
    self:SetAngle(angle)

    local dodgeState = self:GetState(StateDefine.k_StateDodge)
    if dodgeState ~= nil and dodgeState.OnSyncStateDodge ~= nil then
        dodgeState.OnSyncStateDodge(self)
    end
end

function SGPlayer:OnSyncStateDodgeEnd(position, angle)
    if self:IsState(StateDefine.k_StateDodge) == true then
        local dodgeState = self:GetState(StateDefine.k_StateDodge)
        if dodgeState then
            dodgeState.OnSyncStateDodgeEnd(self, position, angle)
        end
    else
        local currentPos = self:GetPosition()
        if Vector3.Distance(currentPos, position) > SyncConsts.k_MinDistanceToMove then
            self.m_MoveComponent:Move(position, angle)
        else
            self:SetPosition(position)
            self:SetAngle(angle)
        end
    end
end

function SGPlayer:OnSyncStateSwim(syncInfo)
    local state = self:GetState(StateDefine.k_StateSwim)
    if state ~= nil and state.OnSyncStateSwim ~= nil then
        state.OnSyncStateSwim(self, syncInfo)
    end
end

function SGPlayer:OnSyncEquipTorch(isEquip)
    self:EquipTorch(isEquip)
end

function SGPlayer:SetSkillSecretKey(secret)
    self.m_SkillSecretKey = secret
end

function SGPlayer:GetSkillSecretKey()
    return self.m_SkillSecretKey
end

function SGPlayer:Update(deltaTime)
    SGPlayer.__super.Update(self, deltaTime)

    if (UNITY_EDITOR or UNITY_STANDALONE) and self:IsHero() then
        self:ProcessEditorInput()
    end
end

function SGPlayer:ProcessEditorInput()
    if UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Space) then
        self:ChangeToJump()
    elseif UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.LeftShift) then
        if self:IsState(StateDefine.k_StateSwim) then
            self:SwimSprint()
        else
            local skillView = UIManager.GetUI("SkillView")
            if skillView then
                local isSprintEnable = skillView:GetSprintBtnActive()
                if isSprintEnable then
                    self:Move(nil, true)
                end
            end
        end
    end
end

function SGPlayer:IsCurrentWorldMotor()
    if self.m_Core == nil then return false end
    return self.m_Core:IsCurrentWorldMotor()
end

function SGPlayer:ZoomIn(callback)
    local config = self:GetCharacterConfig()
    self.m_Core:ZoomIn(config.CloseupAnchorHeight, callback)
end

function SGPlayer:ZoomOut(callback)
    self.m_Core:ZoomOut(callback)
end

function SGPlayer:AllowDisconnect(value)
    if self.m_Core == nil then
       return
    end
    self.m_Core:AllowDisconnect(value)
end

function SGPlayer:CameraControllerResetZoomScale(isSmooth)
    if self.m_Core == nil then
       return
    end
    self.m_Core:CameraControllerResetZoomScale(isSmooth)   
end

function SGPlayer:GetMoveSpeed()
    return self.m_AttrComponent:GetMoveSpeed()
end

function SGPlayer:GetRotateSpeed()
    return self.m_AttrComponent:GetRotateSpeed()
end

function SGPlayer:WarmUpShaderKeywords()
    self.m_Core:WarmUpShaderKeywords()
end

function SGPlayer:IsWarmUpShaderKeywordsCompleted()
    return self.m_Core:IsWarmUpShaderKeywordsCompleted()
end

function SGPlayer:SetCameraDataBySceneID(sceneID)
   local sceneConfig = SceneConfig[sceneID]
   if sceneConfig ~= nil then
      local cameraConfigPath =  sceneConfig.CameraConfigPath
      if cameraConfigPath ~= "" then
         self.m_Core:SetCameraData(cameraConfigPath)
      end
   end
end

function SGPlayer:IsOpenSwimCamera()
    local sceneID = SceneManager.GetCurrentSceneID()  
    local sceneConfig = SceneConfig[sceneID]
    if sceneConfig ~= nil then
       return sceneConfig.IsOpenSwimCamera
   end
   return 0
end

function SGPlayer:IsOpenSprintCamera()
    local sceneID = SceneManager.GetCurrentSceneID()  
    local sceneConfig = SceneConfig[sceneID]
    if sceneConfig ~= nil then
       return sceneConfig.IsOpenSprintCamera
   end
   return 0
end

function SGPlayer:IsOpenLookAt()
    local sceneID = SceneManager.GetCurrentSceneID()  
    local sceneConfig = SceneConfig[sceneID]
    if sceneConfig ~= nil then
       return sceneConfig.IsOpenLookAt
   end
   return 0
end

return SGPlayer