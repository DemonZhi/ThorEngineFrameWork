---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/1/18 14:51
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local BattleMessage = require("MainGame/Message/BattleMessage")
local SkillRootMotion = require("Engine/Systems/ObjectSystem/Skill/SkillRootMotion")
local SkillJump = class("SkillJump", SkillRootMotion)
local SyncConsts = ComponentDefine.SyncConsts
local StateDefine = SGEngine.Core.StateDefine
local AnimationEventDefines = SGEngine.Core.AnimationEventDefines

function SkillJump:Ctor()
    SkillJump.__super.Ctor(self)
end

function SkillJump:Init(object, skillConfig, targetObjectId, targetPosition)
    SkillJump.__super.Init(self, object, skillConfig, targetObjectId, targetPosition)
    if object.m_StateCheckerComponent then
        object.m_StateCheckerComponent:SetFallCheckActive(false)
    end
    self:SetParamToCore(false, self.m_Config.AttackRadius)
    self.m_IsFalling = false
    self.m_IsHero = object:IsHero()
    if not self.m_IsHero and object.m_StateCheckerComponent then
        object.m_StateCheckerComponent:SetSwimCheckActive(true)
    end
end

function SkillJump:Destroy()
    local owner = self.m_Owner
    if owner.m_StateCheckerComponent and owner:IsHero() == true then
        owner.m_StateCheckerComponent:SetFallCheckActive(true)
    end

    if self.m_IsFreezing then
        self.m_IsFreezing = false
        owner:UnFreezeAnimator()
    end

    if owner:IsNextState(StateDefine.k_StateSwim) == false then
        self.m_Owner:SetCurrentGravity(self.m_OriginGravity)
        self.m_Owner:SetCurrentMoveSpeedY(0)
    end

    if not self.m_IsHero and owner.m_StateCheckerComponent then
        owner.m_StateCheckerComponent:SetSwimCheckActive(false)
    end
    SkillJump.__super.Destroy(self)
end

function SkillJump:SetCoreInitParam()
    SkillJump.__super.SetCoreInitParam(self)
    local jumpParam = self.m_Config.SkillModuleParams
    if not jumpParam then
        Logger.Error("[SkillJump](SetCoreInitParam) Jump Param null, id:{%s}", self.m_Config.ID)
        return
    end
    local owner = self.m_Owner
    self.m_OriginGravity = owner:GetCurrentGravity()
    owner:SetCurrentMoveSpeed(jumpParam.m_SpeedXZ)
    owner:SetCurrentMoveSpeedY(-jumpParam.m_SpeedY)
    owner:SetCurrentGravity(-jumpParam.m_Gravity)
end

function SkillJump:Update(deltaTime)
    SkillJump.__super.Update(self, deltaTime)

    if not self.m_IsSkillStarted then
        return
    end

    if self.m_IsFalling and self:CheckAlmostGround() then
        self:EndFallIdle()
    end

    if self.m_IsHero then
        self.m_FrameCount = self.m_FrameCount + 1
        self:CheckAndSync()
    end
end

function SkillJump:SetFallMoveEnable(active)
    self.m_Owner.m_Core:OnSyncState(StateDefine.k_StateSkill, active)
end

function SkillJump:CheckAlmostGround()
    local jumpParam = self.m_Config.SkillModuleParams
    local height = jumpParam.m_CheckGroundHeight
    return self.m_Owner:IsAlmostOnGround(height)
end

function SkillJump:BeginFallIdle()
    self.m_IsFalling = true
    self.m_IsFreezing = true
    self:SetFallMoveEnable(true)
    self.m_Owner:FreezeAnimator()
end

function SkillJump:EndFallIdle()
    self.m_IsFalling = false
    self:SetFallMoveEnable(false)
    self.m_Owner:UnFreezeAnimator()
    self.m_IsFreezing = false
    if self.m_IsHero then
        self:SyncJumpEnd()
    end
end

function SkillJump:SyncJumpEnd()
    BattleMessage.SendSkillJumpFallStop(self.m_Config.ID)
end

--region 事件
function SkillJump:OnSkillEvent(eventName)
    SkillJump.__super.OnSkillEvent(self, eventName)
    if eventName == AnimationEventDefines.k_EventFrontSwing then
        self:BeginFallIdle()
    elseif eventName == AnimationEventDefines.k_EventLand then
        self.m_Owner:SetCurrentGravity(self.m_OriginGravity)
        self.m_Owner:SetCurrentMoveSpeedY(0)
        self:SetParamToCore(true, self.m_Config.AttackRadius)
    end
end
--endregion

return SkillJump