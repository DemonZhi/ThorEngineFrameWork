---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/12/1 10:31
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local BattleMessage = require("MainGame/Message/BattleMessage")
local SkillMove = class("SkillMove", SkillBase)
local StateDefine = SGEngine.Core.StateDefine
local SyncConsts = ComponentDefine.SyncConsts
local MoveSyncType = ComponentDefine.MoveSyncType

function SkillMove:Ctor()
    SkillMove.__super.Ctor(self)
end

function SkillMove:Init(object, skillConfig, targetObjectId)
    self.m_IsMoving = false
    SkillMove.__super.Init(self, object, skillConfig, targetObjectId)
    self.m_FrameCount = 0
end

function SkillMove:Destroy()
    SkillMove.__super.Destroy(self)
end

function SkillMove:SetCoreInitParam()
    local owner = self.m_Owner
    if owner == nil then
        return
    end

    owner:SetCurrentMoveSpeed(self.m_Config.MovingSpeed)
    owner:SetCurrentRotateSpeed(self.m_Config.RotateSpeed)
end

function SkillMove:OnSkillStart()
    local owner = self.m_Owner
    self.m_IsAcceptAngleFromJoystick = self.m_Config.SkillModuleParams[1] ~= 1
    owner.m_Core:OnSyncState(StateDefine.k_StateSkill, self.m_IsAcceptAngleFromJoystick)
end

function SkillMove:Update(deltaTime)
    SkillMove.__super.Update(self, deltaTime)
    self.m_FrameCount = self.m_FrameCount + 1
    if self.m_IsMoving == true then
        self:CheckSync()
    end
end

function SkillMove:OnSkillButtonMove(angle)
    if self.m_IsAcceptAngleFromJoystick == false then
        local owner = self.m_Owner
        owner:SetStateTargetAngle(StateDefine.k_StateSkill, angle)
    end
end

function SkillMove:OnSkillButtonDown(angle)
    local owner = self.m_Owner
    if angle == nil then
        angle = owner:GetAngle()
    end
    if self.m_IsAcceptAngleFromJoystick == false then
        owner:SetStateTargetAngle(StateDefine.k_StateSkill, angle)
        if not self.m_IsMoving then
            owner.m_Core:OnSyncStateMove(StateDefine.k_StateSkill)
        end
        self.m_IsMoving = true
    end
end

function SkillMove:OnSkillButtonUp()
    local owner = self.m_Owner
    local angle = owner:GetAngle()
    if self.m_IsAcceptAngleFromJoystick == false then
        owner:SetStateTargetAngle(StateDefine.k_StateSkill, angle)
        self.m_IsMoving = false
        owner.m_Core:OnSyncStateStopMove(StateDefine.k_StateSkill)
    end
end

--region 同步
function SkillMove:SyncMove(moveAngle)
    local owner = self.m_Owner
    if owner == nil then
        return
    end
    if not moveAngle then
        moveAngle = owner:GetStateTargetAngle(StateDefine.k_StateSkill)
    end

    local pos = owner:GetPosition()
    local angle = owner:GetAngle()
    local predictStepCount = SyncConsts.k_SyncPosPredictCount
    if predictStepCount > 0 then
        pos = owner:PredictPosOnGroundByController(moveAngle, owner:GetCurrentMoveSpeed(), predictStepCount)
    end

    BattleMessage.SendSkillMove(pos, angle, MoveSyncType.k_SkillMove)
    self.m_LastSyncAngle = angle
end

function SkillMove:SyncStop()
    local owner = self.m_Owner
    if owner == nil then
        return
    end

    local posX, posY, posZ = owner:GetPositionXYZ()
    local angle = owner:GetAngle()
    BattleMessage.SendSkillMoveXYZ(posX, posY, posZ, angle, MoveSyncType.k_SkillMoveStop)
end

function SkillMove:CheckSync()
    local moveAngle = self.m_Owner:GetStateTargetAngle(StateDefine.k_StateSkill)
    if self:NeedSync(moveAngle) then
        self:SyncMove(moveAngle)
    end
end

function SkillMove:NeedSync(moveAngle)
    if not self.m_IsMoving then
        return false
    end

    local config = self.m_Config
    ---如果是原地可旋转技能，每帧同步朝向
    if config.MovingSpeed == 0 and config.RotateSpeed ~= 0 then
        return true
    end
    ---普通技能不在转向阶段每5帧同步位置
    if self.m_FrameCount % SyncConsts.k_SyncPosFrameCount == 0 then
        return true
    end
    ---普通技能在转向阶段每帧同步
    if self.m_LastSyncAngle == nil or Mathf.DeltaAngle(self.m_LastSyncAngle, moveAngle) >= self:GetSyncPosDiffAngle() then
        return true
    end
    return false
end

function SkillMove:GetSyncPosDiffAngle()
    if self.m_IsAcceptAngleFromJoystick then
        return SyncConsts.k_SyncPosDifAngleMaxPrecise
    else
        return SyncConsts.k_SyncPosDifAngle
    end
end
--endregion

function SkillMove:OnSkillMove()
    SkillMove.__super.OnSkillMove(self)
    if not self.m_IsMoving then
        self.m_IsMoving = true
        self:SyncMove()
    end
end

function SkillMove:OnSkillMoveStop()
    if self.m_IsMoving == true then
        self.m_IsMoving = false
        self:SyncStop()
    end
end

return SkillMove