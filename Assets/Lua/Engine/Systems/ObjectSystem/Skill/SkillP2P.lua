---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/12/1 10:31
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local BattleMessage = require("MainGame/Message/BattleMessage")
local SkillP2P = class("SkillP2P", SkillBase)
local StateDefine = SGEngine.Core.StateDefine
local SyncConsts = ComponentDefine.SyncConsts
local MoveSyncType = ComponentDefine.MoveSyncType

function SkillP2P:Ctor()
    SkillP2P.__super.Ctor(self)
end

function SkillP2P:Init(object, skillConfig, targetObjectId, targetPosition)
    self.m_IsMoving = false
    SkillP2P.__super.Init(self, object, skillConfig, targetObjectId, targetPosition)
    self.m_FrameCount = 0
    self.m_IsHandleJoyStickEvent = false
end

function SkillP2P:SetCoreInitParam()
    local owner = self.m_Owner
    if owner == nil then
        return
    end
    owner:SetCurrentMoveSpeed(self.m_Config.MovingSpeed)
    owner:SetCurrentRotateSpeed(self.m_Config.RotateSpeed)
end

function SkillP2P:Destroy()
    self.m_Owner:UnFreezeAnimator()
    SkillP2P.__super.Destroy(self)
end

function SkillP2P:Update(deltaTime)
    SkillP2P.__super.Update(self, deltaTime)
    self.m_FrameCount = self.m_FrameCount + 1
    if self.m_IsMoving then
        self:CheckSync()
    end
end

--region 同步
function SkillP2P:SyncMove()
    local owner = self.m_Owner
    if owner == nil then
        return
    end
    local angle = owner:GetAngle()
    local pos = owner:GetPosition()
    local predictStepCount = SyncConsts.k_SyncPosPredictCount
    local isArrived = false
    if predictStepCount > 0 then
        pos, isArrived = owner:CalculateNextPosWithTarget(owner:GetCurrentMoveSpeed(), self.m_TargetObjectId, isArrived, true, predictStepCount)
    end

    if isArrived then
        BattleMessage.SendSkillMove(pos, angle, MoveSyncType.k_SkillMoveAlmostEnd)
    else
        BattleMessage.SendSkillMove(pos, angle, MoveSyncType.k_SkillMove)
    end
end

function SkillP2P:SyncStop()
    local owner = self.m_Owner
    if owner == nil then
        return
    end

    local posX, posY, posZ = owner:GetPositionXYZ()
    local angle = owner:GetAngle()
    BattleMessage.SendSkillMoveXYZ(posX, posY, posZ, angle, MoveSyncType.k_SkillMoveStop)
end

function SkillP2P:CheckSync()
    if self:NeedSync() then
        self:SyncMove()
    end
end

function SkillP2P:NeedSync()
    if self.m_FrameCount % SyncConsts.k_SyncPosFrameCount == 0 then
        return true
    end
    return false
end
--endregion

function SkillP2P:OnSkillMoveStop()
    self.m_IsMoving = false
    self.m_Owner:UnFreezeAnimator()
    self:SyncStop()
end

function SkillP2P:OnSkillFrontSwing()
    if self:GetTarget() == nil then
        return
    end
    self.m_IsMoving = true
    self:SetParamToCore(true)
    self.m_Owner:FreezeAnimator()
end

function SkillP2P:GetTarget()
    return ObjectManager.GetObject(self.m_TargetObjectId)
end

function SkillP2P:SetParamToCore(movable)
    self.m_Owner.m_Core:OnSyncState(StateDefine.k_StateSkill, movable)
end

return SkillP2P