---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/12/27 18:18
---
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
local BattleMessage = require("MainGame/Message/BattleMessage")
local StateCaught = class("StateCaught", StateBase)
local StateDefine = SGEngine.Core.StateDefine
local Core_EntityUtility = SGEngine.Core.EntityUtility
local k_SyncDeltaTime = 0.1

function StateCaught.Ctor(owner, stateComponent)
    StateCaught.__super.Ctor(owner, stateComponent)
    stateComponent.m_StateCaughtParam = {}
end

function StateCaught.Init(owner, stateComponent)
    StateCaught.__super.Init(owner, stateComponent)
    local stateCaughtParam = stateComponent.m_StateCaughtParam
    stateCaughtParam.m_LastSyncTime = Time.time
    local configID = stateCaughtParam.m_ConfigID
    local targetObjID = stateCaughtParam.m_TargetObjID
    if not configID then
        Logger.LogErrorFormat("[StateCaught](Init) None caught config:" .. configID)
        owner:DelState(StateDefine.k_StateCaught)
        return
    end

    local config = CaughtConfig[configID]
    if not config then
        Logger.LogErrorFormat("[StateCaught](Init) None caught config:" .. configID)
        owner:DelState(StateDefine.k_StateCaught)
        return
    end

    local aniName = config.AniName
    local mountPoint = config.MountPoint
    local positionOffset = config.PositionOffset
    local rotationOffset = config.RotationOffset
    if string.IsNullOrEmpty(aniName) then
        aniName = StateConsts.k_Daze
    end

    stateCaughtParam.m_MountSuccess = Core_EntityUtility.MountToObject(owner:GetObjectID(), targetObjID, mountPoint,
                    positionOffset[1], positionOffset[2], positionOffset[3],
                    rotationOffset[1], rotationOffset[2], rotationOffset[3])
    StateCaught.PlayAnimation(owner, aniName)
end

function StateCaught.CheckCanMount(owner, mountObjectID)
    local mountObject = ObjectManager.GetObject(mountObjectID)
    if mountObjectID or mountObject == nil then
        return false
    end

    if mountObject:IsModelLoadFinish() == false then
        return false
    end

    return true
end

function StateCaught.Destroy(owner, stateComponent)
    StateCaught.__super.Destroy(owner, stateComponent)
    local unMountSuccess = false
    if owner.m_InitScale then
        unMountSuccess = Core_EntityUtility.UnMountObject(owner:GetObjectID(), owner.m_InitScale.x, owner.m_InitScale.y, owner.m_InitScale.z)
    else
        unMountSuccess = Core_EntityUtility.UnMountObject(owner:GetObjectID(), 1, 1, 1)
    end

    if owner:IsHero() and owner:IsModelLoadFinish() == true and unMountSuccess == true then
        local x, y, z = owner:GetPositionXYZ()
        local angle = owner:GetAngle()
        BattleMessage.SendSyncPosition(x, y, z, angle, true)
    end
end

function StateCaught.Update(deltaTime, owner, stateComponent)
    StateCaught.__super.Update(deltaTime, owner, stateComponent)
    local stateCaughtParam = stateComponent.m_StateCaughtParam
    StateCaught.CheckSync(owner, stateCaughtParam)
end

function StateCaught.CheckSync(owner, stateCaughtParam)
    if owner:IsHero() == false then
        return
    end

    if owner:IsModelLoadFinish() == false then
        return
    end
    
    if not stateCaughtParam.m_MountSuccess then
        return
    end

    if Time.time - stateCaughtParam.m_LastSyncTime > k_SyncDeltaTime then
        stateCaughtParam.m_LastSyncTime = Time.time
        local x, y, z = owner:GetPositionXYZ()
        local angle = owner:GetAngle()
        BattleMessage.SendSyncPosition(x, y, z, angle, false)
    end
end


return StateCaught