---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/2/24 11:55
---
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
local StateHit = class("StateHit", StateBase)
local StateDefine = SGEngine.Core.StateDefine
local AnimationEventDefines = SGEngine.Core.AnimationEventDefines
local HitTypeEnum = StateConsts.HitTypeEnum
function StateHit.Ctor(owner, stateComponent)
    StateHit.__super.Ctor(owner, stateComponent)
    stateComponent.m_StateHitParam = {}
end

function StateHit.Init(owner, stateComponent)
    --Logger.LogInfo("[StateHit](Init), frame:%s", Time.frameCount)
    StateHit.__super.Init(owner, stateComponent)
    local stateHitParam = stateComponent.m_StateHitParam
    local hitType = stateHitParam.m_HitType
    local serverDuration = stateHitParam.m_ServerDuration
    local animName
    local startEvent = AnimationEventDefines.k_EventStart
    local endEvent = AnimationEventDefines.k_EventEnd

    if hitType == HitTypeEnum.NormalHit then
        animName = StateConsts.k_HitAnimationName
    elseif hitType == HitTypeEnum.HitBack then
        animName = StateConsts.k_HitAnimationName
    elseif hitType == HitTypeEnum.HitDown then
        animName = StateConsts.k_HitDownAnimationName
    elseif hitType == HitTypeEnum.HitFly then
        animName = StateConsts.k_HitFlyAnimationName
        endEvent = AnimationEventDefines.k_EventLand
    else
        Logger.LogErrorFormat("(StateHit)[Init]None hitType:"..tostring(hitType))
        owner:DelState(StateDefine.k_StateHit)
    end

    if serverDuration == nil then
        serverDuration = owner:GetTimeBetweenAnimationEvent(animName, startEvent, endEvent)
    end

    stateHitParam.m_Duration = serverDuration
    if serverDuration == 0 then
        owner:DelState(StateDefine.k_StateHit)
        return
    end
    stateHitParam.m_StartTime = Time.time
    local destination = stateHitParam.m_Destination
    StateHit.SetParamToCore(owner, destination, stateHitParam.m_Speed)

    if not animName then
        --Logger.Error("Try to play empty anim")
        return
    end
    --stateHitParam.m_IsBreakable = false
    owner:SetAngle(stateHitParam.m_Angle)
    StateHit.PlayAnimation(owner, animName)
end

function StateHit.Update(deltaTime, owner, stateComponent)
    local stateHitParam = stateComponent.m_StateHitParam
    if Time.time - stateHitParam.m_StartTime > stateHitParam.m_Duration then
        owner:DelState(StateDefine.k_StateHit)
    end
end

function StateHit.Destroy(owner, stateComponent)
    if owner:IsState(StateDefine.k_StateDaze) then
        local stateDaze = owner:GetState(StateDefine.k_StateDaze)
        stateDaze.Init(owner, stateComponent)
    end
    StateHit.__super.Destroy(owner, stateComponent)
end

--function StateHit.OnBeginMove(owner, stateComponent)
--    if not stateComponent.m_StateHitParam.m_IsBreakable then
--        return
--    end
--    owner:ChangeToMove()
--end

--function StateHit.OnAniEvent(owner, eventName)
--    if eventName == AnimationEventDefines.k_EventRearSwing then
--        owner.m_StateComponent.m_StateHitParam.m_IsBreakable = true
--    end
--    if eventName == AnimationEventDefines.k_EventEnd then
--        StateHit.OnFinish(owner)
--    end
--end

function StateHit.SetParamToCore(owner, destination, speed)
    owner.m_Core:OnSyncState(StateDefine.k_StateHit, destination.x, destination.y, destination.z, speed)
end

return StateHit