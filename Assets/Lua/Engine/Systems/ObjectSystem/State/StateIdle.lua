---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/1/26 17:39
---
local StateDefine = SGEngine.Core.StateDefine
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
local StateIdle = class("StateIdle", StateBase)
local AnimationEventDefines = SGEngine.Core.AnimationEventDefines
local EventDefine = require("Engine/UI/Event/EventDefine")
local k_EnterCloseupZoomScale = 0.4
local k_ExitCloseupZoomScale = 0.95

function StateIdle.Ctor(owner, stateComponent)
    StateIdle.__super.Ctor(owner, stateComponent)

    local GameSettings = GameSettings
    k_EnterCloseupZoomScale = tonumber(GameSettings["EnterCloseupZoomScale"].Value)
    k_ExitCloseupZoomScale = tonumber(GameSettings["ExitCloseupZoomScale"].Value)
end

function StateIdle.Init(owner, stateComponent)
    StateIdle.__super.Init(owner, stateComponent)
    StateIdle.RegisterDispatchEvent(owner)
    if owner:IsOnBattle() == true then
        owner:PlayAnimation(StateConsts.k_BattleIdleAnimationName)
    elseif owner.isEquipTorch then
        owner:PlayAnimation(StateConsts.k_TorchIdleAnimationName)
    else
        owner:PlayAnimation(StateConsts.k_IdleAnimationName)
    end

    if stateComponent.m_StateIdleParam == nil then
        stateComponent.m_StateIdleParam = {}
    end
    stateComponent.m_IsCloseup = false
    stateComponent.m_IsCloseupMotorActive = false
    owner.m_Core:SetGrounderIKEnable(true)
    owner.m_StateCheckerComponent:SetSwimCheckActive(true)
    if owner:IsHero() then
       StateIdle.SetStoryBtnActive(true)
    end
end

function StateIdle.Update(deltaTime, owner, stateComponent)
    if owner:IsHero() and owner:IsModelLoadFinish() then
        StateIdle.UpdateZoomState(owner, stateComponent)
    end
end

function StateIdle.UpdateZoomState(owner, stateComponent)
    if owner:IsOpenLookAt() <= 0 then
       return
    end

    local cameraZoomScale = owner.m_Core:GetCameraCurrentZoomScale()
    if not stateComponent.m_IsCloseup and cameraZoomScale < k_EnterCloseupZoomScale then
        owner:ZoomIn(function()
            stateComponent.m_IsCloseupMotorActive = true
        end)
        stateComponent.m_IsCloseup = true
    elseif stateComponent.m_IsCloseup and cameraZoomScale > k_ExitCloseupZoomScale and stateComponent.m_IsCloseupMotorActive then
        owner:ZoomOut(function()
            stateComponent.m_IsCloseup = false
        end)
        stateComponent.m_IsCloseupMotorActive = false
    end
end

function StateIdle.Destroy(owner, stateComponent)
    StateIdle.UnRegisterOnBattleCallback(owner)
    StateIdle.__super.Destroy(owner, stateComponent)
    stateComponent.m_IsCloseup = false
    stateComponent.m_IsCloseupMotorActive = false
    owner.m_Core:SetGrounderIKEnable(false)
    if owner:IsHero() then
       StateIdle.SetStoryBtnActive(false) 
    end
end

function StateIdle.OnBeginMove(owner, stateComponent)
    if not stateComponent.m_IsCloseup then
        owner:ChangeToMove()
    end
end

function StateIdle.RegisterDispatchEvent(owner)
    StateIdle.RegisterOnBattleCallback(owner)
end

function StateIdle.RegisterOnBattleCallback(owner)
    local dispatcher = owner.m_EventDispatcherComponent
    if not dispatcher then
        return
    end
    dispatcher:AddEventListener(EventDefine.k_OnBattle, StateIdle.OnBattle)
    dispatcher:AddEventListener(EventDefine.k_OffBattle, StateIdle.OffBattle)
end

function StateIdle.UnRegisterOnBattleCallback(owner)
    local dispatcher = owner.m_EventDispatcherComponent
    if not dispatcher then
        return
    end
    dispatcher:RemoveEventListener(EventDefine.k_OnBattle, StateIdle.OnBattle)
    dispatcher:RemoveEventListener(EventDefine.k_OffBattle, StateIdle.OffBattle)
    owner:UnRegAnimationCallBack(StateConsts.k_OnBattleStandAnimationName)
    owner:UnRegAnimationCallBack(StateConsts.k_OffBattleStandAnimationName)
end

function StateIdle.OnBattle(owner, playAnimation)
    if playAnimation == false then
        return
    end

    if owner:IsState(StateDefine.k_StateIdle) == false then
        return
    end
    --if owner:IsPlayingAnimation(StateConsts.k_IdleAnimationName) == false then
    --    return
    --end
    ---现在没有k_OnBattleStandAnimationName 动画，直接BattleIdle
    owner:PlayAnimation(StateConsts.k_BattleIdleAnimationName)
    --owner:PlayAnimation(StateConsts.k_OnBattleStandAnimationName, 0, 0.1, 0, function(eventName)
    --    if eventName == AnimationEventDefines.k_EventEnd and owner:IsState(StateDefine.k_StateIdle) then
    --        owner:PlayAnimation(StateConsts.k_BattleIdleAnimationName)
    --    end
    --end)
end

function StateIdle.OffBattle(owner, params)
    if owner:IsPlayingAnimation(StateConsts.k_BattleIdleAnimationName) == false then
        return
    end

    owner:PlayAnimation(StateConsts.k_OffBattleStandAnimationName, 0, 0.1, 0, function(eventName)
        if eventName == AnimationEventDefines.k_EventEnd and owner:IsState(StateDefine.k_StateIdle) then
            owner:PlayAnimation(StateConsts.k_IdleAnimationName)
        end
    end)
end

function StateIdle.SetStoryBtnActive(active)
    local skillView = UIManager.GetUI("SkillView")
    if skillView then
        skillView:SetStoryBtnActive(active)
    end
end

return StateIdle