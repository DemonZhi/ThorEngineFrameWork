---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/1/26 21:34
---
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
local EventDefine = require("Engine/UI/Event/EventDefine")
---@class StateMove:StateBase
local StateMove = class("StateMove", StateBase)
local StateDefine = SGEngine.Core.StateDefine
local AnimationEventDefines = SGEngine.Core.AnimationEventDefines
function StateMove.Ctor(owner, stateComponent)
    StateMove.__super.Ctor(owner, stateComponent)
end

function StateMove.Init(owner, stateComponent)
    StateMove.__super.Init(owner, stateComponent)
    if stateComponent.m_StateMoveParam == nil then
        stateComponent.m_StateMoveParam = {}
    end
    stateComponent.m_StateMoveParam.m_CurrentAnimation = nil
    StateMove.RegisterDispatchEvent(owner)
end

function StateMove.Destroy(owner, stateComponent)
    StateMove.UnRegisterOnBattleCallback(owner)
    StateMove.__super.Destroy(owner, stateComponent)
end

function StateMove.GetRunAnimationName(owner)
    if owner:IsOnBattle() then
        return StateConsts.k_BattleRunAnimationName
    elseif owner.m_IsEquipTorch then
        return StateConsts.k_TorchRunAnimationName
    else
        return StateConsts.k_RunAnimationName
    end
end

function StateMove.RegisterDispatchEvent(owner)
    StateMove.RegisterOnBattleCallback(owner)
end

function StateMove.RegisterOnBattleCallback(owner)
    local dispatcher = owner.m_EventDispatcherComponent
    if not dispatcher then
        return
    end
    dispatcher:AddEventListener(EventDefine.k_OffBattle, StateMove.OffBattle)
end

 function StateMove.UnRegisterOnBattleCallback(owner)
     local dispatcher = owner.m_EventDispatcherComponent
     if not dispatcher then
         return
     end
     dispatcher:RemoveEventListener(EventDefine.k_OffBattle, StateMove.OffBattle)
     owner:UnRegAnimationCallBack(StateConsts.k_OffBattleRunAnimationName)
 end

function StateMove.OffBattle(owner, params)
    if owner.m_StateComponent.m_StateMoveParam.m_CurrentAnimation ~= StateConsts.k_BattleRunAnimationName or owner:IsState(StateDefine.k_StateMove) == false then
        return
    end
    owner:PlayAnimation(StateConsts.k_OffBattleRunAnimationName, 0, 0.1, 0, function(eventName)
        if eventName == AnimationEventDefines.k_EventEnd then
            owner:PlayAnimation(StateConsts.k_RunAnimationName)
        end
    end)
end

function StateMove.OnOffRide(owner)
    owner:PlayAnimation(StateConsts.k_IdleAnimationName, 0, 0)
    owner.m_Core:DelState(StateDefine.k_StateMove)
end

function StateMove.PlayAnimation(owner, animationName, crossFade, callback)
    owner.m_StateComponent.m_StateMoveParam.m_CurrentAnimation = animationName
    StateMove.__super.PlayAnimation(owner, animationName, crossFade, callback)
end

return StateMove