---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/2/24 11:55
---
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
---@class StatePull:StateBase
local StatePull = class("StatePull", StateBase)
local StateDefine = SGEngine.Core.StateDefine
local AnimationEventDefines = SGEngine.Core.AnimationEventDefines
local HitTypeEnum = StateConsts.HitTypeEnum

function StatePull.Ctor(owner, stateComponent)
    StatePull.__super.Ctor(owner, stateComponent)
    stateComponent.m_StatePullParam = {}
end

function StatePull.Init(owner, stateComponent)
    --Logger.LogInfo("[StatePull](Init), frame:%s", Time.frameCount)
    StatePull.__super.Init(owner, stateComponent)
    local statePullParam = stateComponent.m_StatePullParam
    local duration = statePullParam.m_Duration

    if duration == 0 then
        owner:DelState(StateDefine.k_StatePull)
        return
    end
    statePullParam.m_StartTime = Time.time
    local targetPosX = statePullParam.m_TargetPosX
    local targetPosY = statePullParam.m_TargetPosY
    local targetPosZ = statePullParam.m_TargetPosZ

    StatePull.SetParamToCore(owner, targetPosX, targetPosY, targetPosZ, statePullParam.m_Speed)

    --statePullParam.m_IsBreakable = false
    --StatePull.PlayAnimation(owner, animName)
end

function StatePull.Update(deltaTime, owner, stateComponent)
    local statePullParam = stateComponent.m_StatePullParam
    if Time.time - statePullParam.m_StartTime > statePullParam.m_Duration then
        owner:DelState(StateDefine.k_StatePull)
    end
end

--function StatePull.Destroy(owner, stateComponent)
--    if owner:IsState(StateDefine.k_StateDaze) then
--        local stateDaze = owner:GetState(StateDefine.k_StateDaze)
--        stateDaze.Init(owner, stateComponent)
--    end
--    StatePull.__super.Destroy(owner, stateComponent)
--end

--function StatePull.OnBeginMove(owner, stateComponent)
--    if not stateComponent.m_StatePullParam.m_IsBreakable then
--        return
--    end
--    owner:ChangeToMove()
--end

--function StatePull.OnAniEvent(owner, eventName)
--    if eventName == AnimationEventDefines.k_EventRearSwing then
--        owner.m_StateComponent.m_StatePullParam.m_IsBreakable = true
--    end
--    if eventName == AnimationEventDefines.k_EventEnd then
--        StatePull.OnFinish(owner)
--    end
--end

function StatePull.SetParamToCore(owner, targetPosX, targetPosY, targetPosZ, speed)
    owner.m_Core:OnSyncState(StateDefine.k_StatePull, targetPosX, targetPosY, targetPosZ, speed)
end

return StatePull