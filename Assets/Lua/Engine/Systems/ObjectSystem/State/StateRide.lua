---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/2/3 14:27
---

local StateDefine = SGEngine.Core.StateDefine
local StateRide = class("StateRide", StateBase)
local BattleMessage = require("MainGame/Message/BattleMessage")
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local MoveType = ComponentDefine.MoveType
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
function StateRide.Ctor(owner, stateComponent)
    StateRide.__super.Ctor(owner, stateComponent)
    stateComponent.m_StateRideParam = {}
end

function StateRide.Init(owner, stateComponent)
    Logger.LogInfo("[StateRide](Init)")
    StateRide.__super.Init(owner, stateComponent)
    local stateData = stateComponent.m_StateRideParam
    local position = owner:GetPosition()
    local angle = owner:GetAngle()
    local rideId = owner.m_RideComponent:GetCurrentRideId()
    local config = MountConfig[rideId]
    if not config then
        Logger.Error("[StateRide](Init)None config for rideId:" .. rideId)
        return
    end
    stateData.m_MountConfig = config
    ---这里如果owner没加载成功先不加，等owner加载成功后会再次Init
    if owner:IsModelLoadFinish() == false then
        Logger.LogInfo("[StateRide](Init) Owner Load not finish return")
        return
    end
    Logger.LogInfo("[StateRide](Init) Owner load is finish , load mount model")
    stateData.m_IsInit = false
    stateData.m_Mount = ObjectManager.CreateClientObject(ObjectTypeEnum.Mount, config.ResourceId, position, angle, 1, false, function(object)
        Logger.LogInfo("[StateRide](Init) Mount load is finish")
        if object ~= nil then
            object:SetRider(owner)
            object:DoInit(true)
        end

        if owner:IsHero() then
            StateRide.SetOnRideBtnActive(false)
            StateRide.SetOffRideBtnActive(true)
        end

        StateRide.SetCamera(owner, true)
        owner.m_StateComponent.m_StateRideParam.m_IsInit = true
    end)
end

function StateRide.SetCamera(owner, enable)
    if owner:IsHero() == false then
        return
    end

    local config = owner:GetCharacterConfig()
    if config == nil then
        return
    end
    if enable == true then
        owner.m_Core:SetAnchorHeight(config.RideCameraAnchorHeight)
    else
        owner.m_Core:SetAnchorHeight(config.CameraAnchorHeight)
    end
end

function StateRide.Destroy(owner, stateComponent)
    local stateRideParam = stateComponent.m_StateRideParam
    if stateRideParam.m_Mount ~= nil then
        ObjectManager.RemoveObject(stateRideParam.m_Mount:GetObjectID())
    end
    stateRideParam.m_Mount = nil
    stateRideParam.m_IsInit = nil
    if owner:IsHero() then
        StateRide.SetOnRideBtnActive(true)
        StateRide.SetOffRideBtnActive(false)
    end

    if owner:IsState(StateDefine.k_StateMove) then
        local stateMove = owner:GetState(StateDefine.k_StateMove)
        if stateMove then
            stateMove.OnOffRide(owner)
        end
    else
        owner:PlayAnimation(StateConsts.k_IdleAnimationName, 0, 0)
    end
    StateRide.SetCamera(owner, false)
    StateRide.__super.Destroy(owner, stateComponent)
end

function StateRide.Update(deltaTime, owner, stateComponent)
    if StateRide.CanPlayIdle(owner) then
        StateRide.PlayIdle(owner)
    end
end

function StateRide.LateUpdate(owner, stateComponent)
    local stateData = stateComponent.m_StateRideParam
    local mountObj = stateData.m_Mount
    if mountObj == nil then
        return
    end

    if mountObj:IsValid() == false then
        return
    end

    if mountObj:IsModelLoadFinish() == false then
        return
    end

    if stateData.m_IsInit ~= true then
        return
    end

    mountObj:OnLateUpdate()
end

function StateRide.CanPlayIdle(owner)
    local stateRideData = owner.m_StateComponent.m_StateRideParam
    if owner == nil or stateRideData == nil or stateRideData.m_IsInit ~= true then
        return false
    end

    if owner:IsState(StateDefine.k_StateMove) or owner:IsState(StateDefine.k_StateJump) or owner:IsState(StateDefine.k_StateNavigate) then
        return false
    end
    return true
end

function StateRide.PlayIdle(owner)
    local stateData = owner.m_StateComponent.m_StateRideParam
    local config = stateData.m_MountConfig
    if owner:IsPlayingAnimation(config.IdleAnimation) == false then
        stateData.m_CurrentMoveType = MoveType.None
        StateRide.PlayAnimation(owner, config.IdleAnimation, 0)
    end
    local mount = stateData.m_Mount
    if mount ~= nil and mount:IsModelLoadFinish() == true then
        if mount:IsPlayingAnimation(StateConsts.k_IdleAnimationName) == false then
            StateRide.PlayAnimation(mount, StateConsts.k_IdleAnimationName)
        end
    end
end

function StateRide.SetOnRideBtnActive(active)
    local skillView = UIManager.GetUI("SkillView")
    if skillView then
        skillView:SetOnRideBtnActive(active)
    end
end

function StateRide.SetOffRideBtnActive(active)
    local skillView = UIManager.GetUI("SkillView")
    if skillView then
        skillView:SetOffRideBtnActive(active)
    end
end

function StateRide.OnBeginMove(owner, stateComponent)
    if owner:IsState(StateDefine.k_StateMove) then
        if owner.m_StateComponent.m_StateMoveParam.m_CurrentMoveType == MoveType.RideRunStopRearSwing then
            owner:ChangeToMove()
        end
    elseif owner:IsState(StateDefine.k_StateJump) == false then
        owner:ChangeToMove()
    end
end

return StateRide
