---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/3/9 16:54
---
local StateDefine = SGEngine.Core.StateDefine
---@class StateSkill : StateBase
local StateSkill = class("StateSkill", StateBase)
local BattleMessage = require("MainGame/Message/BattleMessage")
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local MoveType = ComponentDefine.MoveType
local AnimationEventDefines = SGEngine.Core.AnimationEventDefines
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
function StateSkill.Ctor(owner, stateComponent)
    StateSkill.__super.Ctor(owner, stateComponent)
    stateComponent.m_StateSkillParam = {}
end

function StateSkill.Init(owner, stateComponent)
    StateSkill.__super.Init(owner, stateComponent)
    if stateComponent.m_StateSkillParam == nil then
        stateComponent.m_StateSkillParam = {}
    end
    --owner.m_Core:SetGrounderIKEnable(true)
end

function StateSkill.Destroy(owner, stateComponent)
    StateSkill.__super.Destroy(owner, stateComponent)
    --owner.m_Core:SetGrounderIKEnable(false)
end

function StateSkill.Update(deltaTime, owner, stateComponent)
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill then
        currentSkill:Update(deltaTime, stateComponent)
    end
end

function StateSkill.OnSkillStart(owner, skillId)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    if not stateData then
        return
    end
    local currentSkill = stateData.m_CurrentSkill
    if not currentSkill then
        return
    end
    local config = currentSkill.m_Config
    if not config then
        Logger.Error("LUA:[SkillBase]OnSkillStart: currentSkill is empty")
        return
    end

    if skillId ~= config.ID then
        Logger.LogInfo("LUA:[SkillBase]:OnSkillStart Ignore: CurrentSkillId:{0}, OnStart:{1}", config.ID, skillId)
        return
    end

    if owner.m_SkillTargetComponent then
        if config.NeedFaceTarget and ( owner:IsHero() or owner.m_ObjectType == ObjectTypeEnum.Monster) then
            local targetId = currentSkill.m_TargetObjectId
            owner:LookAtTargetWithID(targetId)
        end
    end
    --Logger.LogInfo("OnSkillStart:%s, frame:%s, skillID:%s", owner:GetObjectID(), Time.frameCount, skillId)
    currentSkill:SetValid(true)
    currentSkill:OnSkillStart()
    if config.SkillEffectsList ~= nil then
        owner.m_EffectComponent:PlaySkillEffect(config.SkillEffectsList)
    end

    -- if config.AudioList ~= nil then 
    --     owner.m_AudioComponent:SetSkillAudioConfigs(config.AudioList)
    -- end

    local comboComponent = owner.m_SkillComboComponent
    if comboComponent ~= nil then
        comboComponent:OnSkillStart(config)
    end

    local skillComponent = owner.m_SkillComponent
    skillComponent:OnSkillStart(config)

    local fightResultComponent = owner.m_FightResultComponent
    if fightResultComponent then
        fightResultComponent:StartCache(currentSkill.m_SkillId)
    end

    owner:EnterBattle(false, false)

    if owner:IsHero() then
        StateSkill.SyncSkill(owner)
    end
end

--region 同步
function StateSkill.SyncSkill(owner)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    local skillId = currentSkill.m_Config.ID
    local targetObjectId = currentSkill.m_TargetObjectId
    BattleMessage.SendUseSkill(skillId, targetObjectId)
end

function StateSkill.OnStateSkillMove(owner, posX, posY, posZ, angle, syncType)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if not currentSkill then
        return
    end
    local syncInfo = {}
    syncInfo.m_TargetPosition = Vector3.New(posX, posY, posZ)
    syncInfo.m_Angle = angle
    syncInfo.m_SyncType = syncType
    currentSkill:UpdateSyncInfo(syncInfo)
end
--endregion

function StateSkill.OnSkillEnd(owner, skillId)
    --Logger.LogInfo("OnSkillEnd:owner:%s, skillId: %d, frame:%s", owner:GetObjectID(), skillId, Time.frameCount)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill == nil or currentSkill:IsValid() == false then
        --Logger.LogInfo("OnSkillEnd:skillId: %d, currentSkill == nil, frame: %s", skillId, Time.frameCount)
        return
    end
    local config = currentSkill.m_Config
    --if owner:IsHero() then
    --    Logger.LogInfo("OnSkillEnd:skillId: %d, current: %d, frame:%s", skillId, config.ID, Time.frameCount)
    --end
    if skillId ~= config.ID then
        ---ComponentSkill:UseSkill--->skill:Init 中会切换状态，切换的时候会调用Core.skill.destroy---> ComponentSkill.OnSkillEnd,
        ---在destroy时 调回来传的skillid 是切换之前的skillid，这里要直接忽略
        return
    end
    currentSkill:OnSkillEnd()
    owner.m_EffectComponent:DestroySkillRelatedEffect()
    local comboComponent = owner.m_SkillComboComponent
    if comboComponent ~= nil then
        comboComponent:OnSkillEnd(skillId)
    end

    local skillComponent = owner.m_SkillComponent
    skillComponent:OnSkillEnd(config)

    local fightResultComponent = owner.m_FightResultComponent
    if fightResultComponent then
        fightResultComponent:StopCache(currentSkill.m_SkillId)
    end

    stateData.m_CurrentSkill:Destroy()

    --if owner:IsHero() then
    --    Logger.LogInfo("SetCurrentSkill: nil, frame:%s", Time.frameCount)
    --end
    stateData.m_CurrentSkill = nil
    owner:BeginExitBattle(tonumber(GameSettings["RoleOffBattleTime"].Value))
end

function StateSkill.OnSkillEvent(owner, eventName)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if not currentSkill then
        return
    end
    local skillId = currentSkill.m_SkillId
    currentSkill:OnSkillEvent(eventName)
    local effectComponent = owner.m_EffectComponent
    if effectComponent then
        effectComponent:HandleAnimationEvent(eventName)
    end

    local fightResultComponent = owner.m_FightResultComponent
    if fightResultComponent then
        fightResultComponent:HandleAnimationEvent(skillId, eventName)
    end

    if eventName == AnimationEventDefines.k_EventRearSwing then
        StateSkill.OnSkillRearSwing(owner)
    elseif eventName == AnimationEventDefines.k_EventFrontSwing then
        StateSkill.OnSkillFrontSwing(owner)
    end
end

function StateSkill.OnSkillRearSwing(owner)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill then
        currentSkill:OnSkillRearSwing()
    end
    local comboComponent = owner.m_SkillComboComponent
    if comboComponent then
        comboComponent:OnSkillRearSwing()
    end

    local skillComponent = owner.m_SkillComponent
    if skillComponent ~= nil then
        skillComponent:OnSkillRearSwing(currentSkill.m_Config)
    end
end

function StateSkill.OnSkillFrontSwing(owner)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill then
        currentSkill:OnSkillFrontSwing()
    end
end

---当前技能移动回调
function StateSkill.OnSkillMove(owner)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill then
        currentSkill:OnSkillMove()
    end
end
---当前技能移动回调
function StateSkill.OnSkillMoveStop(owner)
    local stateComponent = owner.m_StateComponent
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill then
        currentSkill:OnSkillMoveStop()
    end
end

---c#状态机统一回调
function StateSkill.OnBeginMove(owner, stateComponent)
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill and currentSkill.m_IsHandleJoyStickEvent then
        currentSkill:OnSkillMove()
    end
end
---c#状态机统一回调
function StateSkill.OnStopMove(owner, stateComponent)
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill and currentSkill.m_IsHandleJoyStickEvent then
        currentSkill:OnSkillMoveStop()
    end
end

function StateSkill.SetParamToCore(owner, ...)
    owner.m_Core:OnSyncState(StateDefine.k_StateSkill, ...)
end

function StateSkill.OnSkillButtonUp(owner, stateComponent)
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill and currentSkill.OnSkillButtonUp then
        currentSkill:OnSkillButtonUp()
    end
end

function StateSkill.OnSkillButtonDown(owner, stateComponent, angle)
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill and currentSkill.OnSkillButtonDown then
        currentSkill:OnSkillButtonDown(angle)
    end
end

function StateSkill.OnSkillButtonMove(owner, stateComponent, angle)
    local stateData = stateComponent.m_StateSkillParam
    local currentSkill = stateData.m_CurrentSkill
    if currentSkill and currentSkill.OnSkillButtonMove then
        currentSkill:OnSkillButtonMove(angle)
    end
end

return StateSkill