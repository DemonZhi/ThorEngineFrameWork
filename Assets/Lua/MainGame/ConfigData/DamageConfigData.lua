---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/9/16 9:52
---
local DamageTypeDefine = require("MainGame/Game/Logic/Skill/Damage/DamageType/DamageTypeDefine")
local CircleDamageCalculator = require("MainGame/Game/Logic/Skill/Damage/DamageCalculator/CircleDamageCalculator")
local RectDamageCalculator = require("MainGame/Game/Logic/Skill/Damage/DamageCalculator/RectDamageCalculator")
local SectorDamageCalculator = require("MainGame/Game/Logic/Skill/Damage/DamageCalculator/SectorDamageCalculator")
local RoleDamageCalculator = require("MainGame/Game/Logic/Skill/Damage/DamageCalculator/RoleDamageCalculator")
local SkillConfigData = require("MainGame/ConfigData/SkillConfigData")

local DamageConfigData = {}
DamageConfigData.m_DataMap = {}
function DamageConfigData:Get(id)
    local data = self.m_DataMap[id]
    if data then
        return data
    end

    local config = ActionConfig[id]
    if not config then
        --Logger.LogErrorFormat("None damage config for id:{0}", id)
        return
    end
    local data = {}
    data.Calculator = self:CreateCalculator(config.Type)
    data.Calculator:ParseConfigData(config.Param)
    data.ID = config.ID
    data.DamageRate = config.Damage
    data.SkillHitList = config.SkillHitList
    data.DeathFlies = config.DeathFlies
    data.EffectList = config.EffectList
    self.m_DataMap[id] = data
    return data
end

function DamageConfigData:CreateCalculator(type)
    local result = nil
    if type == DamageTypeDefine.k_Circle then
        result = CircleDamageCalculator.New()
    elseif type == DamageTypeDefine.k_Rect then
        result = RectDamageCalculator.New()
    elseif type == DamageTypeDefine.k_Sector then
        result = SectorDamageCalculator.New()
    else
        result = RoleDamageCalculator.New()
    end

    return result
end

return DamageConfigData