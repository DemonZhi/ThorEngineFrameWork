---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/9/16 10:29
---

local RoleDamageCalculator = require("MainGame/Game/Logic/Skill/Damage/DamageCalculator/RoleDamageCalculator")
local RectDamageCalculator = class("RectDamageCalculator", RoleDamageCalculator)
local StringUtil = require("Engine/Common/Utilities/StringUtil")
local GeometryUtil = require("Engine/Common/Utilities/GeometryUtil")

function RectDamageCalculator:Ctor()
    RectDamageCalculator.__super.Ctor(self)
end

function RectDamageCalculator:ParseConfigData(data)
    local dataList = string.split(data, ";")
    if #dataList ~= 4 then
        Logger.LogErrorFormat("RectDamageConfig ParseConfigData Error:{0}", data)
        return
    end

    self.m_LeftBottomPoint = self:ParseDataToVector(string.GetValueByIndex(dataList,1, ""))
    self.m_LeftTopPoint = self:ParseDataToVector(string.GetValueByIndex(dataList,2, ""))
    self.m_RightTopPoint = self:ParseDataToVector(string.GetValueByIndex(dataList,3, ""))
    self.m_RightBottomPoint = self:ParseDataToVector(string.GetValueByIndex(dataList,4, ""))
end

function RectDamageCalculator:ParseDataToVector(data)
    if string.IsNullOrEmpty(data) then
        return Vector3.zero
    end

    local result = StringUtil.String2Vector2(data, ",");
    result.z = result.y;
    result.y = 0;
    return result
end

function RectDamageCalculator:IsWithin(attackObject, targetObject)
    local center = attackObject:GetPosition()
    local rotation = attackObject:GetRotation()
    local point = targetObject:GetPosition()
    local pointA = self:IgnoreYAxis(center + rotation * self.m_LeftBottomPoint);
    local pointB = self:IgnoreYAxis(center + rotation * self.m_LeftTopPoint);
    local pointC = self:IgnoreYAxis(center + rotation * self.m_RightTopPoint);
    local pointD = self:IgnoreYAxis(center + rotation * self.m_RightBottomPoint);

    return GeometryUtil.IsPointInRect(self:IgnoreYAxis(point), pointA, pointB, pointC, pointD);
end

function RectDamageCalculator:IgnoreYAxis(vector)
    local result = {}
    result.x = vector.x
    result.z = vector.z
    return result
end

function RectDamageCalculator:DrawDebug(center, rotation)
    local Color = UnityEngine.Color
    local beginPoint = center + rotation * self.m_LeftBottomPoint
    local endPoint = center + rotation * self.m_LeftTopPoint
    UnityEngine.Debug.DrawLine(beginPoint, endPoint, Color.red, 2, false)
    beginPoint = endPoint
    endPoint = center + rotation * self.m_RightTopPoint
    UnityEngine.Debug.DrawLine(center + beginPoint, endPoint, Color.green, 2, false)
    beginPoint = endPoint
    endPoint = center + rotation * self.m_RightBottomPoint
    UnityEngine.Debug.DrawLine(center + beginPoint, endPoint, Color.blue, 2, false)
    beginPoint = endPoint
    endPoint = center + rotation * self.m_LeftBottomPoint
    UnityEngine.Debug.DrawLine(beginPoint, endPoint, Color.yellow, 2, false);
end

return RectDamageCalculator