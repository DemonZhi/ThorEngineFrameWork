---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/9/17 10:31
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local FightResultBase = require("MainGame/Game/Logic/Skill/FightResult/FightResultBase")
local ObjectPool = require("MainGame/Game/Logic/Skill/ObjectPool")
local FightResultDamage = class("FightResultDamage", FightResultBase)
local FightResultType = ComponentDefine.FightResultType
FightResultDamage.m_FightResultType = FightResultType.k_Damage

if FightResultDamage.m_Pool == nil then
    FightResultDamage.m_Pool = ObjectPool.CreatePool(FightResultDamage)
end

function FightResultDamage.Ctor()
    FightResultDamage.__super.Ctor(self)
end

function FightResultDamage.Get()
    local pool = FightResultDamage.m_Pool
    if pool then
        return pool:Get()
    end
end

function FightResultDamage:Recycle()
    local pool = FightResultDamage.m_Pool
    if pool then
        pool:Recycle(self, true)
    end
end

function FightResultDamage:Init(attackObjectId)
    FightResultDamage.__super.Init(self)
    self.m_AttackObjectId = attackObjectId
end

--public const int DMG_TYPE_CRIT           = 1;
--public const int DMG_TYPE_THUMP_HIT_NAIL = 2;
--public const int DMG_TYPE_DEFUSE         = 3;
--public const int DMG_TYPE_HIT            = 4;
--public const int DMG_TYPE_SLIDE_NAIL     = 5;
--public const int DMG_TYPE_SLIDE_DEFUSE   = 6;
--public const int DMG_TYPE_SLIDE          = 7;

function FightResultDamage:Deserialize(netBuffer)
    self.m_TargetID = netBuffer:ReadUInt()
    self.m_DamageType = netBuffer:ReadUByte()
    self.m_Damage = netBuffer:ReadInt()
    self.m_ActionId = netBuffer:ReadInt()
    self.m_HitPoint = netBuffer:ReadUByte()
    --Logger.LogInfo("[FightResultDamage]Deserialize FightResultDamage:m_TargetID:{%d},m_DamageType:{%d},m_Damage:{%d},m_ActionId:{%d},m_HitPoint:{%d}",
    --        self.m_TargetID, self.m_DamageType, self.m_Damage, self.m_ActionId, self.m_HitPoint)
end

function FightResultDamage:Execute()
    local object = ObjectManager.GetObject(self.m_TargetID)

    if not object then
        return
    end

    if object:IsValid() == false then
        return
    end
    object:HandleDamage(self.m_AttackObjectId, self.m_Damage, self.m_ActionId, self.m_DamageType)
    --Logger.LogInfo("[FightResultDamage]Execute FightResultDamage:m_TargetID:{%d},m_DamageType:{%d},m_Damage:{%d},m_ActionId:{%d},m_HitPoint:{%d}, frame:{%d}",
    --        self.m_TargetID, self.m_DamageType, self.m_Damage, self.m_ActionId, self.m_HitPoint, Time.frameCount)
end

function FightResultDamage:GetActionID()
    return self.m_ActionId
end

return FightResultDamage