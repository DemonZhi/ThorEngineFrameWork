---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/9/17 10:31
---
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local FightResultBase = require("MainGame/Game/Logic/Skill/FightResult/FightResultBase")
local StateConsts = require("Engine/Systems/ObjectSystem/State/StateConsts")
local ObjectPool = require("MainGame/Game/Logic/Skill/ObjectPool")
local FightResultPull = class("FightResultPull", FightResultBase)
local Core_EntityUtility = SGEngine.Core.EntityUtility
local FightResultType = ComponentDefine.FightResultType
local HitTypeEnum = StateConsts.HitTypeEnum
FightResultPull.m_FightResultType = FightResultType.k_Hit
if FightResultPull.m_Pool == nil then
    FightResultPull.m_Pool = ObjectPool.CreatePool(FightResultPull)
end

function FightResultPull.Ctor()
    FightResultPull.__super.Ctor(self)
end

function FightResultPull.Get()
    local pool = FightResultPull.m_Pool
    if pool then
        return pool:Get()
    end
end

function FightResultPull:Recycle()
    local pool = FightResultPull.m_Pool
    if pool then
        pool:Recycle(self, true)
    end
end

function FightResultPull:Init(actionId, hitPoint, damageKey)
    FightResultPull.__super.Init(self, actionId, hitPoint, damageKey)
end

function FightResultPull:Deserialize(netBuffer)
    if self.m_Destination == nil then
        self.m_Destination = Vector3.New()
    end
    self.m_TargetID = netBuffer:ReadInt()
    self.m_PosX, self.m_PosY, self.m_PosZ, self.m_Angle = netBuffer:ReadPosAngle(nil, nil, nil, nil)
    self.m_HitPoint = netBuffer:ReadUByte()
    self.m_Speed = netBuffer:ReadFloat()
    self.m_Duration = netBuffer:ReadFloat()
    self.m_TargetPosX = netBuffer:ReadFloat()
    self.m_TargetPosY = netBuffer:ReadFloat()
    self.m_TargetPosZ = netBuffer:ReadFloat()
    --Logger.LogInfo("[FightResultPull]Deserialize FightResultPull:self.m_TargetID:{%d}, self.m_Duration:{%s}, m_HitPoint:{%d}, m_Speed:{%s}, m_Angle:{%s}, frame:{%s}",
    --        self.m_TargetID, self.m_Duration, self.m_HitPoint, self.m_Speed, self.m_Angle, Time.frameCount)
end

function FightResultPull:Execute()
    local object = ObjectManager.GetObject(self.m_TargetID)
    if not object then
        return
    end

    if object:IsValid() == false then
        return
    end
    object:SetPositionXYZ(self.m_PosX, self.m_PosY, self.m_PosZ)
    object:SetAngle(self.m_Angle)
    object:ChangeToPull(self.m_Duration, self.m_TargetPosX, self.m_TargetPosY, self.m_TargetPosZ, self.m_Speed)
end

return FightResultPull