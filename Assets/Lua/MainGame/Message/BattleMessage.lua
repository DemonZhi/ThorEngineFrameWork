---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/11/25 16:28
---
local ComponentDefine = require("Engine/Systems/ObjectSystem/Components/ComponentDefine")
local FightResultDamage = require("MainGame/Game/Logic/Skill/FightResult/FightResultDamage")
local FightResultHit = require("MainGame/Game/Logic/Skill/FightResult/FightResultHit")
local FightResultDead = require("MainGame/Game/Logic/Skill/FightResult/FightResultDead")
local FightResultDaze = require("MainGame/Game/Logic/Skill/FightResult/FightResultDaze")
local FightResultAddBuff = require("MainGame/Game/Logic/Skill/FightResult/FightResultAddBuff")
local FightResultMissile = require("MainGame/Game/Logic/Skill/FightResult/FightResultMissile")
local FightResultCaught = require("MainGame/Game/Logic/Skill/FightResult/FightResultCaught")
local FightResultPull = require("MainGame/Game/Logic/Skill/FightResult/FightResultPull")
local FightResultFreeze = require("MainGame/Game/Logic/Skill/FightResult/FightResultFreeze")
local FightResultAttr = require("MainGame/Game/Logic/Skill/FightResult/FightResultAttr")
local SyncConsts = ComponentDefine.SyncConsts
local DebugDraw = SGEngine.Core.DebugDraw
local Core_EntityUtility = SGEngine.Core.EntityUtility
local StateDefine = SGEngine.Core.StateDefine
BattleMessage = BattleMessage or {}
BattleMessage.m_EnableDebug = false

--region receive
function BattleMessage.Init()
    ClientNetManager.Register(Message.ST_STATE_MOVE_GROUND, BattleMessage.OnStateMoveGround)
    ClientNetManager.Register(Message.ST_ADD_OBJ, BattleMessage.OnAddObject)
    ClientNetManager.Register(Message.ST_RM_OBJ, BattleMessage.OnDeleteObject)
    ClientNetManager.Register(Message.ST_SET_ANGLE, BattleMessage.OnSetAngle)
    ClientNetManager.Register(Message.ST_SETPOS, BattleMessage.OnSetPosition)
    ClientNetManager.Register(Message.ST_SET_VALUE, BattleMessage.OnSetValue)
    ClientNetManager.Register(Message.ST_TRACE_POS, BattleMessage.OnTracePos)
    ClientNetManager.Register(Message.ST_STATE_RIDE, BattleMessage.OnGetOnRide)
    ClientNetManager.Register(Message.ST_STATE_RIDE_END, BattleMessage.OnGetOffRide)
    ClientNetManager.Register(Message.ST_SET_EXT_PARAM, BattleMessage.OnSetExtParam)
    ClientNetManager.Register(Message.ST_CORR_POS_HERO, BattleMessage.OnCorrectHeroPos)
    ClientNetManager.Register(Message.ST_REPLACE, BattleMessage.OnReplace)
    ClientNetManager.Register(Message.ST_STATE_REPLACE, BattleMessage.OnStateReplace)
    ClientNetManager.Register(Message.ST_RECONNECT_DONE, BattleMessage.OnReconnectDone)
    ClientNetManager.Register(Message.ST_STATE_JUMP, BattleMessage.OnSyncStateJump)
    ClientNetManager.Register(Message.ST_STATE_JUMP_POS, BattleMessage.OnSyncJumpPos)
    ClientNetManager.Register(Message.ST_STATE_JUMP_STOP, BattleMessage.OnSyncStateJumpStop)
    ClientNetManager.Register(Message.ST_STATE_SWIM, BattleMessage.OnSyncSwim)
    ClientNetManager.Register(Message.ST_ADD_DAMAGE, BattleMessage.OnFightResultDamage)
    ClientNetManager.Register(Message.ST_CANCEL_CD, BattleMessage.OnCancelSkillCD)
    ClientNetManager.Register(Message.ST_FIGHT_STATE, BattleMessage.OnFightState)
    ClientNetManager.Register(Message.ST_SET_VALUE_IN_FIGHT, BattleMessage.OnSetValueInFight)
    ClientNetManager.Register(Message.ST_STATE_SKILL, BattleMessage.OnStateUseSkill)
    ClientNetManager.Register(Message.ST_STATE_DEAD, BattleMessage.OnFightResultDead)
    ClientNetManager.Register(Message.ST_STATE_DAZED, BattleMessage.OnFightResultDaze)
    ClientNetManager.Register(Message.ST_STATE_DAZED_END, BattleMessage.OnStateDazeEnd)
    ClientNetManager.Register(Message.ST_STATE_FREEZE, BattleMessage.OnFightResultFreeze)
    ClientNetManager.Register(Message.ST_STATE_FREEZE_END, BattleMessage.OnStateFreezeEnd)
    ClientNetManager.Register(Message.ST_REVIVE, BattleMessage.OnRevive)
    ClientNetManager.Register(Message.ST_ADD_BUFF, BattleMessage.OnFightResultAddBuff)
    ClientNetManager.Register(Message.ST_REMOVE_BUFF, BattleMessage.OnRemoveBuff)
    ClientNetManager.Register(Message.ST_STATE_HIT, BattleMessage.OnFightResultHit)
    ClientNetManager.Register(Message.ST_STATE_HIT_FLOAT, BattleMessage.OnFightResultHitFloat)
    ClientNetManager.Register(Message.ST_LAUNCH_MISSILE, BattleMessage.OnFightResultMissileLaunch)
    ClientNetManager.Register(Message.ST_DEL_STATE_JUMP, BattleMessage.OnDeleteStateJump)
    ClientNetManager.Register(Message.ST_STATE_NAVIGATE, BattleMessage.OnSyncStateNavigate)
    ClientNetManager.Register(Message.ST_STATE_NAVIGATION_END, BattleMessage.OnSyncNavigationEnd)
    ClientNetManager.Register(Message.ST_SKILL_MOVE, BattleMessage.OnStateSkillMove)
    ClientNetManager.Register(Message.ST_MISSILE_TARGET, BattleMessage.OnMissileSetTarget)
    ClientNetManager.Register(Message.ST_PREDICT_MISSILE_STAGE_END, BattleMessage.OnMissilePredictEnd)
    ClientNetManager.Register(Message.ST_MISSILE_DELETE_INFO, BattleMessage.OnMissileDelete)
    ClientNetManager.Register(Message.ST_MISSILE_STAGE, BattleMessage.OnMissileStage)
    ClientNetManager.Register(Message.ST_STATE_DODGE, BattleMessage.OnSyncStateDodge)
    ClientNetManager.Register(Message.ST_STATE_DODGE_END, BattleMessage.OnSyncStateDodgeEnd)
    ClientNetManager.Register(Message.ST_STATE_MST_STAND, BattleMessage.OnMonsterStand)
    ClientNetManager.Register(Message.ST_SPAWN_FINISH, BattleMessage.OnMonsterSpawnFinish)
    ClientNetManager.Register(Message.ST_MST_ATTACKABLE, BattleMessage.OnMonsterAttackable)
    ClientNetManager.Register(Message.ST_STATE_CAUGHT, BattleMessage.OnFightResultCaught)
    ClientNetManager.Register(Message.ST_STATE_CAUGHT_END, BattleMessage.OnSyncStateCaughtEnd)
    ClientNetManager.Register(Message.ST_STATE_PULL, BattleMessage.OnFightResultPull)
    ClientNetManager.Register(Message.ST_ADD_CHAIN_SFX, BattleMessage.OnAddChainEffect)
    ClientNetManager.Register(Message.ST_ADD_DRAG_EFFECT, BattleMessage.OnAddDragEffect)
    ClientNetManager.Register(Message.ST_REMOVE_DRAG_EFFECT, BattleMessage.OnRemoveDragEffect)

    --region unused
    ClientNetManager.Register(Message.ST_WEAR_EQUIP, BattleMessage.OnWearEquip)
    ClientNetManager.Register(Message.ST_UPDATE_PLAYER_EQUIP, BattleMessage.OnUpdatePlayerEquip)
    ClientNetManager.Register(Message.ST_MY_CITY_PLANE_UPDATE, BattleMessage.OnMyCityPlaneUpdate)
    ClientNetManager.Register(Message.ST_ALL_CITY_PLANE_STATUS, BattleMessage.OnAllCityPlaneStatus)
    ClientNetManager.Register(Message.ST_PROP_POINT_SCHEME, BattleMessage.OnPropPointScheme)
    ClientNetManager.Register(Message.ST_SYNC_TOD_TIME, BattleMessage.OnSyncTodTime)
    ClientNetManager.Register(Message.ST_SYNC_WEATHER, BattleMessage.OnSyncWeather)
    ClientNetManager.Register(Message.ST_TIME_CTRL_REFRESH, BattleMessage.OnTimeCtrlRefresh)
    ClientNetManager.Register(Message.ST_SERVER_TIME, BattleMessage.OnServerTime)
    ClientNetManager.Register(Message.ST_SKILL_SECRET, BattleMessage.OnSkillSecret)
    ClientNetManager.Register(Message.ST_ENTER_SCENE_COMPLETED, BattleMessage.OnEnterSceneComplete)
    ClientNetManager.Register(Message.ST_RIDING_GET_ON_RET, BattleMessage.OnRidingGetOnRet)
    --endregion

    --region deprecated
    --ClientNetManager.Register(Message.SC_SyncEquipTorch, BattleMessage.OnSyncEquipTorch)
    --endregion
end

function BattleMessage.Destroy()
    ClientNetManager.UnRegister(Message.ST_STATE_MOVE_GROUND, BattleMessage.OnStateMoveGround)
    ClientNetManager.UnRegister(Message.ST_ADD_OBJ, BattleMessage.OnAddObject)
    ClientNetManager.UnRegister(Message.ST_RM_OBJ, BattleMessage.OnDeleteObject)
    ClientNetManager.UnRegister(Message.ST_SETPOS, BattleMessage.OnSetPosition)
    ClientNetManager.UnRegister(Message.ST_STATE_RIDE, BattleMessage.OnGetOnRide)
    ClientNetManager.UnRegister(Message.ST_STATE_RIDE_END, BattleMessage.OnGetOffRide)
    ClientNetManager.UnRegister(Message.ST_TRACE_POS, BattleMessage.OnTracePos)
    ClientNetManager.UnRegister(Message.ST_SET_ANGLE, BattleMessage.OnSetAngle)
    ClientNetManager.UnRegister(Message.ST_SET_VALUE, BattleMessage.OnSetValue)
    ClientNetManager.UnRegister(Message.ST_SET_EXT_PARAM, BattleMessage.OnSetExtParam)
    ClientNetManager.UnRegister(Message.ST_CORR_POS_HERO, BattleMessage.OnCorrectHeroPos)
    ClientNetManager.UnRegister(Message.ST_REPLACE, BattleMessage.OnReplace)
    ClientNetManager.UnRegister(Message.ST_STATE_REPLACE, BattleMessage.OnStateReplace)
    ClientNetManager.UnRegister(Message.ST_RECONNECT_DONE, BattleMessage.OnReconnectDone)
    ClientNetManager.UnRegister(Message.ST_STATE_JUMP, BattleMessage.OnSyncStateJump)
    ClientNetManager.UnRegister(Message.ST_STATE_JUMP_POS, BattleMessage.OnSyncJumpPos)
    ClientNetManager.UnRegister(Message.ST_STATE_JUMP_STOP, BattleMessage.OnSyncStateJumpStop)
    ClientNetManager.UnRegister(Message.ST_STATE_SWIM, BattleMessage.OnSyncSwim)
    ClientNetManager.UnRegister(Message.ST_CANCEL_CD, BattleMessage.OnCancelSkillCD)
    ClientNetManager.UnRegister(Message.ST_FIGHT_STATE, BattleMessage.OnFightState)
    ClientNetManager.UnRegister(Message.ST_SET_VALUE_IN_FIGHT, BattleMessage.OnSetValueInFight)
    ClientNetManager.UnRegister(Message.ST_STATE_SKILL, BattleMessage.OnStateUseSkill)
    ClientNetManager.UnRegister(Message.ST_STATE_DEAD, BattleMessage.OnFightResultDead)
    ClientNetManager.UnRegister(Message.ST_STATE_DAZED, BattleMessage.OnFightResultDaze)
    ClientNetManager.UnRegister(Message.ST_ADD_BUFF, BattleMessage.OnFightResultAddBuff)
    ClientNetManager.UnRegister(Message.ST_STATE_DAZED_END, BattleMessage.OnStateDazeEnd)
    ClientNetManager.UnRegister(Message.ST_STATE_FREEZE, BattleMessage.OnFightResultFreeze)
    ClientNetManager.UnRegister(Message.ST_STATE_FREEZE_END, BattleMessage.OnStateFreezeEnd)
    ClientNetManager.UnRegister(Message.ST_REMOVE_BUFF, BattleMessage.OnRemoveBuff)
    ClientNetManager.UnRegister(Message.ST_STATE_HIT, BattleMessage.OnFightResultHit)
    ClientNetManager.UnRegister(Message.ST_STATE_HIT_FLOAT, BattleMessage.OnFightResultHitFloat)
    ClientNetManager.UnRegister(Message.ST_DEL_STATE_JUMP, BattleMessage.OnDeleteStateJump)
    ClientNetManager.UnRegister(Message.ST_STATE_NAVIGATE, BattleMessage.OnSyncStateNavigate)
    ClientNetManager.UnRegister(Message.ST_STATE_NAVIGATION_END, BattleMessage.OnSyncNavigationEnd)
    ClientNetManager.UnRegister(Message.ST_SKILL_MOVE, BattleMessage.OnStateSkillMove)
    ClientNetManager.UnRegister(Message.ST_MISSILE_TARGET, BattleMessage.OnMissileSetTarget)
    ClientNetManager.UnRegister(Message.ST_PREDICT_MISSILE_STAGE_END, BattleMessage.OnMissilePredictEnd)
    ClientNetManager.UnRegister(Message.ST_MISSILE_DELETE_INFO, BattleMessage.OnMissileDelete)
    ClientNetManager.UnRegister(Message.ST_MISSILE_STAGE, BattleMessage.OnMissileStage)
    ClientNetManager.UnRegister(Message.ST_STATE_DODGE, BattleMessage.OnSyncStateDodge)
    ClientNetManager.UnRegister(Message.ST_STATE_DODGE_END, BattleMessage.OnSyncStateDodgeEnd)
    ClientNetManager.UnRegister(Message.ST_STATE_MST_STAND, BattleMessage.OnMonsterStand)
    ClientNetManager.UnRegister(Message.ST_SPAWN_FINISH, BattleMessage.OnMonsterSpawnFinish)
    ClientNetManager.UnRegister(Message.ST_MST_ATTACKABLE, BattleMessage.OnMonsterAttackable)
    ClientNetManager.UnRegister(Message.ST_STATE_CAUGHT, BattleMessage.OnFightResultCaught)
    ClientNetManager.UnRegister(Message.ST_STATE_CAUGHT_END, BattleMessage.OnSyncStateCaughtEnd)
    ClientNetManager.UnRegister(Message.ST_STATE_PULL, BattleMessage.OnFightResultPull)
    ClientNetManager.UnRegister(Message.ST_ADD_CHAIN_SFX, BattleMessage.OnFightResultPull)
    ClientNetManager.UnRegister(Message.ST_ADD_DRAG_EFFECT, BattleMessage.OnAddDragEffect)
    ClientNetManager.UnRegister(Message.ST_REMOVE_DRAG_EFFECT, BattleMessage.OnRemoveDragEffect)

    --region unused
    ClientNetManager.UnRegister(Message.ST_WEAR_EQUIP, BattleMessage.OnWearEquip)
    ClientNetManager.UnRegister(Message.ST_UPDATE_PLAYER_EQUIP, BattleMessage.OnUpdatePlayerEquip)
    ClientNetManager.UnRegister(Message.ST_MY_CITY_PLANE_UPDATE, BattleMessage.OnMyCityPlaneUpdate)
    ClientNetManager.UnRegister(Message.ST_ALL_CITY_PLANE_STATUS, BattleMessage.OnAllCityPlaneStatus)
    ClientNetManager.UnRegister(Message.ST_PROP_POINT_SCHEME, BattleMessage.OnPropPointScheme)
    ClientNetManager.UnRegister(Message.ST_SYNC_TOD_TIME, BattleMessage.OnSyncTodTime)
    ClientNetManager.UnRegister(Message.ST_SYNC_WEATHER, BattleMessage.OnSyncWeather)
    ClientNetManager.UnRegister(Message.ST_TIME_CTRL_REFRESH, BattleMessage.OnTimeCtrlRefresh)
    ClientNetManager.UnRegister(Message.ST_SERVER_TIME, BattleMessage.OnServerTime)
    ClientNetManager.UnRegister(Message.ST_SKILL_SECRET, BattleMessage.OnSkillSecret)
    ClientNetManager.UnRegister(Message.ST_ENTER_SCENE_COMPLETED, BattleMessage.OnEnterSceneComplete)
    ClientNetManager.UnRegister(Message.ST_RIDING_GET_ON_RET, BattleMessage.OnRidingGetOnRet)
    ClientNetManager.UnRegister(Message.ST_ADD_DAMAGE, BattleMessage.OnFightResultDamage)

    --region deprecated
    --ClientNetManager.UnRegister(Message.SC_SyncEquipTorch, BattleMessage.OnSyncEquipTorch)
    --ClientNetManager.UnRegister(Message.SC_SyncDodge, BattleMessage.OnSyncStateDodge)
    --endregion
end

function BattleMessage.OnTracePos(buffer)
    if BattleMessage.m_DebugPosition == nil then
        BattleMessage.m_DebugPosition = Vector3.New()
    end

    local id = buffer:ReadInt()
    BattleMessage.m_DebugPosition.x = buffer:ReadFloat()
    BattleMessage.m_DebugPosition.y = buffer:ReadFloat()
    BattleMessage.m_DebugPosition.z = buffer:ReadFloat()
    local angle = buffer:ReadFloat()
    local angleY = Core_EntityUtility.ServerAngleToClientAngle(angle)
    local height = buffer:ReadFloat()
    local object = ObjectManager.GetObject(id)
    if object == nil then
        return
    end

    local objectBehaviour = object.m_Core.ObjectBehaviour
    if objectBehaviour == nil then
        return
    end

    local clientPos = object:GetPosition()
    objectBehaviour:SetDebugInfo(BattleMessage.m_DebugPosition.x, BattleMessage.m_DebugPosition.y, BattleMessage.m_DebugPosition.z, angleY)
    --if object:IsHero() == false then
        --local color = UnityEngine.Color.red
        --DebugDraw.CreateGo(BattleMessage.m_DebugPosition, color, 0, "TRACE:"..object:GetObjectID(), angleY)
    ----else
    --    local color = UnityEngine.Color.green
    --    DebugDraw.CreateGo(BattleMessage.m_DebugPosition, color, 0, "TRACEHero", angleY)
    --end
    if object:IsHero() then
        local clientHeight = Core_EntityUtility.GetHeightOnFloor(BattleMessage.m_DebugPosition, object.m_Core)
        OperateController.UpdateObjDebugInfo(clientPos.x, clientPos.y, clientPos.z, BattleMessage.m_DebugPosition.x, BattleMessage.m_DebugPosition.y, BattleMessage.m_DebugPosition.z, clientHeight, height)
    end
end

function BattleMessage.OnStateMoveGround(buffer)
    local msg = {}
    local objectId = buffer:ReadInt()
    --Logger.LogErrorFormat("Get :{0}",objectId)
    msg.m_PosX, msg.m_PosY, msg.m_PosZ, msg.m_Angle = buffer:ReadPosAngle(nil, nil, nil, nil)
    msg.m_SyncType = buffer:ReadUByte()
    msg.m_JoystickAngle = buffer:ReadFloat()

    local object = ObjectManager.GetObject(objectId)
    if object == nil then
        --Logger.LogErrorFormat("[SceneManager] OnStateMoveGround：No target object:{0}", objectId)
        return
    end

    if object:IsHero() then
        return
    end
    --local pos = Vector3.New(msg.m_PosX, msg.m_PosY, msg.m_PosZ)
    --local color = UnityEngine.Color.blue
    --DebugDraw.CreateGo(pos, color, 1, "Move", msg.m_Angle)
    --Logger.LogInfo("OnStateMoveGround:obj:%s, angle:%s, {%s},{%s},{%s},%s, syncType:%d", objectId, msg.m_Angle, msg.m_PosX, msg.m_PosY, msg.m_PosZ, Time.frameCount, msg.m_SyncType)
    if object.OnStateMoveGround then
        msg.m_TargetPosition = Vector3.New(msg.m_PosX, msg.m_PosY, msg.m_PosZ)
        object:OnStateMoveGround(msg)
    end
end

function BattleMessage.OnStateSkillMove(buffer)
    local objectId = buffer:ReadInt()
    --Logger.LogErrorFormat("Get :{0}",objectId)
    local posX, posY, posZ, angle
    posX, posY, posZ, angle = buffer:ReadPosAngle(posX, posY, posZ, angle)
    local syncType = buffer:ReadUByte()
    --Logger.LogInfo("OnStateSkillMove:{%f},{%f},{%f},%d, syncType:%d", posX, posY, posZ, Time.frameCount, syncType)
    --local pos = Vector3.New(posX, posY, posZ)
    --local color = UnityEngine.Color.blue
    --DebugDraw.CreateGo(pos, color, 0, "S", angle)
    local object = ObjectManager.GetObject(objectId)
    if object == nil then
        --Logger.LogErrorFormat("[SceneManager] OnStateMoveGround：No target object:{0}", objectId)
        return
    end

    if object:IsHero() then
        return
    end

    object.m_SkillComponent:OnStateSkillMove(posX, posY, posZ, angle, syncType)
end

function BattleMessage.OnSetPosition(buffer)
    local objectId = buffer:ReadInt()
    local position = Vector3.New(buffer:ReadFloat(), buffer:ReadFloat(), buffer:ReadFloat())
    local object = ObjectManager.GetObject(objectId)
    if object == nil then
        --Logger.LogErrorFormat("[SceneManager] OnSyncPosition：No target object:{0}", objectId)
        return
    end
    local shouldFixY = true
    object:SetPosition(position, shouldFixY)
end

function BattleMessage.OnSetAngle(buffer)
    local objectId = buffer:ReadInt()
    local angle = buffer:ReadIntDegree()
    local clientAngle = Core_EntityUtility.ServerAngleToClientAngle(angle)
    local object = ObjectManager.GetObject(objectId)
    if object == nil then
        --Logger.LogErrorFormat("[SceneManager] OnSetAngle：No target object:{0}", objectId)
        return
    end
    object:SetAngle(clientAngle)
end

function BattleMessage.OnSetValue(buffer)
    local objectId = buffer:ReadInt()
    local propIndex = buffer:ReadUByte()
    local object = ObjectManager.GetObject(objectId)
    if object == nil then
        --Logger.LogErrorFormat("[SceneManager] OnSetValue：No target object:{0}", objectId)
        return
    end

    local value
    local valueType = ComponentAttribute.GetAttrValueType(propIndex)
    if valueType == "short" then
        value = buffer:ReadUShort()
    elseif valueType == "int" then
        value = buffer:ReadInt()
    else
        value = buffer:ReadFloat()
    end

    if object.m_AttrComponent then
        object.m_AttrComponent:SetAttribute(propIndex, value)
        --Logger.LogInfo("BattleMessage.OnSetValue:prop_idx: %s, value:%s", propIndex, value)
    end
end

function BattleMessage.OnSetExtParam(buffer)
    local index = buffer:ReadInt()
    local value = buffer:ReadInt()
    local hero = ObjectManager.GetHero()
    if hero then
        hero.m_AttrComponent:SetExtendAttribute(index, value)
    end
end

function BattleMessage.OnCorrectHeroPos(buffer)
    local id = buffer:ReadInt()
    local angle = 0
    local pos = Vector3.New()
    pos.x, pos.y, pos.z, angle = buffer:ReadPosAngle(pos.x, pos.y, pos.z, angle)
    local obj = ObjectManager.GetObject(id)
    if obj then
        obj:SetPosition(pos)
        obj:SetAngle(angle)
        --Logger.LogInfo("CorrectPosition:{%s,%s,%s},angle:{%s}", pos.x, pos.y, pos.z, angle)
    end
end

function BattleMessage.OnDeleteObject(buffer)
    local objectId = buffer:ReadInt()
    ObjectManager.RemoveObjectImmediately(objectId)
    --Logger.LogInfo("OnDeleteObject:{%s}", objectId)
end

function BattleMessage.OnGetOnRide(buffer)
    --Logger.LogInfo("OnGetOnRide, %d", Time.frameCount)
    local objectId = buffer:ReadInt()
    local rideId = buffer:ReadInt()
    local object = ObjectManager.GetObject(objectId)
    if not object then
        return
    end
    if not object.m_RideComponent then
        return
    end
    object.m_RideComponent:OnGetOnRide(rideId)
end

function BattleMessage.OnGetOffRide(buffer)
    --Logger.LogInfo("OnGetOffRide, %d", Time.frameCount)
    local objectId = buffer:ReadInt()
    --local rideId = buffer:ReadInt()
    local object = ObjectManager.GetObject(objectId)
    if not object then
        return
    end
    if not object.m_RideComponent then
        return
    end
    object.m_RideComponent:OnGetOffRide()
end

function BattleMessage.OnAddObject(buffer)
    local isHero = buffer:ReadUByte()
    if isHero > 1 then
        Logger.LogErrorFormat("[BattleMessage](OnAddObject)Read first byte error, isHero: {0}", isHero)
        return
    end
    isHero = isHero == 1
    local entityType = buffer:ReadInt()
    local object = ObjectManager.CreateObject(entityType)
    if object == nil then
        Logger.LogErrorFormat("[BattleMessage](OnAddObject)ObjectManager.CreateObject failed, entityType: {0}", entityType)
        return
    end

    if isHero then
        ObjectManager.SetHero(object)
    end

    object:Init()
    object:Deserialize(buffer)
    object:LoadModel()
    --Logger.LogInfo("[BattleMessage](OnAddObject) ObjectID: %s", object:GetObjectID())
end

function BattleMessage.OnStateUseSkill(buffer)
    local objectId = buffer:ReadInt()
    local skillId = buffer:ReadInt()
    local posX, posY, posZ, angle
    posX, posY, posZ, angle = buffer:ReadPosAngle(posX, posY, posZ, angle)
    local tx = buffer:ReadFloat()
    local ty = buffer:ReadFloat()
    local tz = buffer:ReadFloat()
    local is_request = buffer:ReadUByte()
    local targetObjectId = buffer:ReadInt()
    local object = ObjectManager.GetObject(objectId)
    if object == nil then
        --Logger.LogErrorFormat("[SceneManager] OnStateUseSkill：No target object:{0}", tostring(objectId))
        return
    end
    if object:IsHero() then
        if is_request then
            object:RawUseSkill(skillId)
        else
            object:UseSkill(skillId)
        end
    else
        if not object.RawUseSkillBySyncInfo then
            return
        end

        local syncInfo = {}
        --Logger.LogInfo("OnStateUseSkill:obj:{%s},{%f},{%f},{%f},%d, angle:{%s} skillId:%d", objectId, posX, posY, posZ, Time.frameCount, angle, skillId)
        syncInfo.m_TargetPosition = Vector3.New(posX, posY, posZ)
        syncInfo.m_TargetObjPosition = Vector3.New(tx, ty, tz)
        syncInfo.m_Angle = angle

        --local color = UnityEngine.Color.red
        --DebugDraw.CreateGo(syncInfo.m_TargetPosition, color, 1, "Skill", angle)
        object:RawUseSkillBySyncInfo(skillId, targetObjectId, syncInfo)
    end
end

function BattleMessage.OnMissileStage(buffer)
    local objectId = buffer:ReadInt()
    local stageIndex = buffer:ReadInt()
    local stageType = buffer:ReadInt()
    local position = Vector3.New(buffer:ReadFloat(), buffer:ReadFloat(), buffer:ReadFloat())
    local angle = buffer:ReadFloat()
    angle = Core_EntityUtility.ServerAngleToClientAngle(angle)

    local missile = ObjectManager.GetObject(objectId)
    if missile then
        --Logger.LogInfo("OnMissileStage:id: %s, stageIndex:%s, frame:%s", objectId, stageIndex, Time.frameCount)
        missile:ChangeStage(stageIndex, position, angle)
    end
end

function BattleMessage.OnMissileSetTarget(buffer)
    local objectId = buffer:ReadInt()
    local targetId = buffer:ReadInt()
    local missile = ObjectManager.GetObject(objectId)
    if missile then
        --Logger.LogInfo("OnMissileSetTarget:id: %s, target:%s, frame:%s", objectId, targetId, Time.frameCount)
        missile:SetTargetId(targetId)
    end
end

function BattleMessage.OnMissilePredictEnd(buffer)
    local objectId = buffer:ReadInt()
    local stageIndex = buffer:ReadInt()
    local fixedDuration = buffer:ReadFloat()
    local position = Vector3.New(buffer:ReadFloat(), buffer:ReadFloat(), buffer:ReadFloat())
    local angle = buffer:ReadFloat()
    local missile = ObjectManager.GetObject(objectId)
    --Logger.LogInfo("OnMissilePredictEnd: objId: %s, stageIndex: %s, persistTime:%s, position:[x:%s, y:%s, z:%s], angle:%s, frame:%s",
    --       objectId, stageIndex, fixedDuration, position.x, position.y, position.z, angle, Time.frameCount)

    if missile and missile.OnAlmostFinish then
        missile:OnAlmostFinish(stageIndex, position, angle, fixedDuration)
    end
end

function BattleMessage.OnMissileDelete(buffer)
    local objectId = buffer:ReadInt()
    local lifeTimeMs = buffer:ReadInt()
    local endIndex = buffer:ReadInt()
    local missile = ObjectManager.GetObject(objectId)
    if missile then
        --Logger.LogInfo("OnMissileDelete:id: %s, frame:%s", objectId, Time.frameCount)
        missile:SetDeleteInfo(lifeTimeMs, endIndex)
        ObjectManager.RemoveObjectWithSelfDelay(objectId)
    end
end

function BattleMessage.OnMyCityPlaneUpdate(buffer)
    local plane_id = buffer:ReadInt()
end

function BattleMessage.OnAllCityPlaneStatus(buffer)
    local num = buffer:ReadInt()
    for i = 1, num do
        local plane_id = buffer:ReadInt()
        local status = buffer:ReadUByte()
    end
end

function BattleMessage.OnPropPointScheme(buffer)
    local hero = ObjectManager.GetHero()
    if hero then
        hero.m_AttrComponent:DeserializePropPoint(buffer)
    end
end

function BattleMessage.OnSyncTodTime(buffer)
    local hour = buffer:ReadFloat()
end

function BattleMessage.OnSyncWeather(buffer)
    local weather_type = buffer:ReadUByte()
end

function BattleMessage.OnTimeCtrlRefresh(buffer)
    local time_ctrl_count = buffer:ReadInt()
    for i = 1, time_ctrl_count do
        local time_ctrl_id = buffer:ReadInt()
        local time_ctrl_val = buffer:ReadInt()
    end
end

function BattleMessage.OnServerTime(buffer)
    local server_time = buffer:ReadInt()
end

function BattleMessage.OnSkillSecret(buffer)
    local secret = buffer:ReadInt()
    local hero = ObjectManager.GetHero()
    if hero and hero.SetSkillSecretKey then
        hero:SetSkillSecretKey(secret)
    end
end

function BattleMessage.OnEnterSceneComplete(buffer)

end

function BattleMessage.OnRidingGetOnRet(buffer)
    local riding_id = buffer:ReadInt()
    local ret = buffer:ReadInt()

    --TODO
end

function BattleMessage.OnReplace(buffer)
    local sceneID = buffer:ReadInt()
    local x = buffer:ReadFloat()
    local y = buffer:ReadFloat()
    local z = buffer:ReadFloat()

    if sceneID == SceneManager.m_CurrentSceneID then
        BattleMessage.SendDeleteReplaceState()
        Logger.LogErrorFormat("[BattleMessage](OnReplace)Replace to the same scene, SceneID: {0}", sceneID)
        return
    end

    local sceneConfig = SceneConfig[sceneID]
    if not sceneConfig then
        Logger.LogErrorFormat("[BattleMessage](OnReplace)sceneID: {0} not found", sceneID)
        return
    end

    LoadingController.LoadScene(sceneID, sceneConfig.SceneType, nil, nil, function()
        local hero = ObjectManager.GetHero()
        if hero then
            BattleMessage.SendDeleteReplaceState()
            local pos = Vector3.New(x, y, z)
            hero:SetPosition(pos, true)
        end
    end, nil)
end

function BattleMessage.OnStateReplace(buffer)
    local objID = buffer:ReadInt()
    local action = buffer:ReadInt()

    --TODO
end

function BattleMessage.OnReconnectDone(buffer)
    --TODO

end

function BattleMessage.OnWearEquip(buffer)
    --TODO
    ComponentBag.DeserializeSingleItem(buffer)
end

function BattleMessage.OnUpdatePlayerEquip(buffer)
    local obj_id = buffer:ReadInt()
    local is_on = buffer:ReadUByte() > 0
    local item_id = buffer:ReadInt()
end

function BattleMessage.OnFightResultDamage(buffer)
    local attackObjectId = buffer:ReadInt()
    local fightResult = FightResultDamage.Get()
    fightResult:Init(attackObjectId)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    --Logger.LogInfo("[BattleMessage]Cache FightResultDamage:current:{%d}, frame:{%s}", fightResult.m_HitPoint, Time.frameCount)
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnFightResultDead(buffer)
    local attackObjectId = buffer:ReadInt()
    local fightResult = FightResultDead.Get()
    fightResult:Init(attackObjectId)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnFightResultDaze(buffer)
    local attackObjectId = buffer:ReadInt()
    local fightResult = FightResultDaze.Get()
    fightResult:Init(attackObjectId)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    --Logger.LogInfo("[BattleMessage]Cache OnFightResultDaze:current:{%d}, fight:{%d}", self.m_CurrentHitPoint, fightResult.m_HitPoint)
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnStateDazeEnd(buffer)
    --Logger.LogInfo("OnStateDazeEnd")
    local objectId = buffer:ReadInt()
    local object = ObjectManager.GetObject(objectId)
    if object == nil then
        return
    end
    object:StopDaze()
end

function BattleMessage.OnFightResultFreeze(buffer)
    local attackObjectId = buffer:ReadInt()
    local fightResult = FightResultFreeze.Get()
    fightResult:Init(attackObjectId)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    --Logger.LogInfo("[BattleMessage]Cache OnFightResultDaze:current:{%d}, fight:{%d}", self.m_CurrentHitPoint, fightResult.m_HitPoint)
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnStateFreezeEnd(buffer)
    local objectId = buffer:ReadInt()
    local object = ObjectManager.GetObject(objectId)
    if object == nil then
        return
    end
    object:StopFreeze()
end

function BattleMessage.OnFightResultAddBuff(buffer)
    local attackObjectId = buffer:ReadInt()
    local fightResult = FightResultAddBuff.Get()
    fightResult:Init(attackObjectId)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    --Logger.LogInfo("[BattleMessage]Cache OnFightResultAddBuff:current:{%d}, fight:{%d}", self.m_CurrentHitPoint, fightResult.m_HitPoint)
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnFightResultHit(buffer)
    local attackObjectId = buffer:ReadInt()
    local fightResult = FightResultHit.Get()
    fightResult:Init(attackObjectId)
    fightResult:DeserializeNormal(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    --Logger.LogInfo("[BattleMessage]Cache OnFightResultHit:fight:{%d}", fightResult.m_HitPoint)
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnFightResultHitFloat(buffer)
    local attackObjectId = buffer:ReadInt()
    local fightResult = FightResultHit.Get()
    fightResult:Init(attackObjectId)
    fightResult:DeserializeHitFloat(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    --Logger.LogInfo("[BattleMessage]Cache OnFightResultHitFloat:fight:{%d}", fightResult.m_HitPoint)
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnFightResultMissileLaunch(buffer)
    local missileObjectID = buffer:ReadInt()
    local fightResult = FightResultMissile.Get()
    fightResult:Init(missileObjectID)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(missileObjectID)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnFightResultCaught(buffer)
    local attackObjectId = buffer:ReadUInt()
    --Logger.LogInfo("[BattleMessage]Cache OnFightResultCaught:attackObjectId:{%s}", attackObjectId)
    local fightResult = FightResultCaught.Get()
    fightResult:Init(attackObjectId)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnFightResultPull(buffer)
    local attackObjectId = buffer:ReadUInt()
    --Logger.LogInfo("[BattleMessage]Cache OnFightResultPull:attackObjectId:{%s}", attackObjectId)
    local fightResult = FightResultPull.Get()
    fightResult:Init(attackObjectId)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    object.m_FightResultComponent:CheckCache(fightResult)
end


function BattleMessage.OnSetValueInFight(buffer)
    local attackObjectId = buffer:ReadUInt()
    --Logger.LogInfo("[BattleMessage]Cache FightResultAttr:attackObjectId:{%s}", attackObjectId)
    local fightResult = FightResultAttr.Get()
    fightResult:Init(attackObjectId)
    fightResult:Deserialize(buffer)
    local object = ObjectManager.GetObject(attackObjectId)
    if object == nil then
        fightResult:Execute()
        fightResult:Destroy()
        return
    end
    object.m_FightResultComponent:CheckCache(fightResult)
end

function BattleMessage.OnAddChainEffect(buffer)
    local fromObjID = buffer:ReadUInt()
    local toObjID = buffer:ReadUInt()
    local cfgID = buffer:ReadInt()
    local invokeCount = buffer:ReadInt()
    local isInvokerEffect = invokeCount == 0
    local fromObj = ObjectManager.GetObject(fromObjID)
    local toObj = ObjectManager.GetObject(toObjID)
    if not fromObj or not toObj then
        Logger.Error("[BattleMessage](OnAddChainEffect) None from or to obj:  from:%s, to:%s", fromObjID, toObjID)
        return
    end
    local effectConfig = ChainAttackConfig[cfgID]
    if not effectConfig then
        Logger.Error("[BattleMessage](OnAddChainEffect) None effect config:  configID:%s", cfgID)
        return
    end

    local targetHangPoint = effectConfig.TargetHangPoint
    local targetTransform = toObj:GetBodyPartTransform(targetHangPoint)
    if not targetTransform then
        targetTransform = toObj:GetTransform()
    end
    local _,effect = fromObj.m_EffectComponent:PlayNormalEffect(effectConfig.EffectID, false)
    if effect then
        if isInvokerEffect == false then
            effect.m_BindPath = targetHangPoint
        end
        effect:Start()
        effect:SetTargetTransform(targetTransform)
    end
end

function BattleMessage.OnSyncStateCaughtEnd(buffer)
    local objectID = buffer:ReadUInt()
    local object = ObjectManager.GetObject(objectID)
    if not object then
        return
    end
    --Logger.LogInfo("[BattleMessage]OnSyncStateCaughtEnd:objectId:{%d}", objectID)
    object:StopCaught()
end

function BattleMessage.OnRemoveBuff(buffer)
    local attackObjectId = buffer:ReadUInt()
    local buffSn = buffer:ReadUInt()
    local isTimeout = buffer:ReadByte() > 0

    ---Buff这里暂时没接，可以不处理，接的时候要处理buffsn不在已有map中的情况，在Recorder找出对应的fightResult然后删掉
end

function BattleMessage.OnCancelSkillCD(buffer)
    local obj_id = buffer:ReadInt()
    local skill_id = buffer:ReadInt()
end

function BattleMessage.OnFightState(buffer)
    local objectId = buffer:ReadInt()
    local isInFight = buffer:ReadUByte() == 1
    local object = ObjectManager.GetObject(objectId)
    if object and object.SetServerFightState then
        object:SetServerFightState(isInFight)
    end
end

function BattleMessage.OnSyncStateJump(buffer)
    local objectId = buffer:ReadInt()
    local posX, posY, posZ, angle = buffer:ReadPosAngle(nil, nil, nil, nil)
    local peakHeight = buffer:ReadFloat()
    local peakTime = buffer:ReadFloat()
    local speed = buffer:ReadFloat()
    local jumpType = buffer:ReadUByte()
    local object = ObjectManager.GetObject(objectId)
    --Logger.LogInfo("[BattleMessage](OnSyncStateJump):{%f},{%f},{%f}, %d, jumpType:%d, angle:%f", posX, posY, posZ, Time.frameCount, jumpType, angle)
    if object == nil then
        return
    end
    object:OnSyncStateJump(Vector3.New(posX, posY, posZ), angle, jumpType, speed, peakTime, peakHeight)
end

function BattleMessage.OnSyncJumpPos(buffer)
end

function BattleMessage.OnSyncStateJumpStop(buffer)
    local id = buffer:ReadInt()
    local position = Vector3.New()
    local angle = 0
    position.x, position.y, position.z, angle = buffer:ReadPosAngle(position.x, position.y, position.z, angle)
    local object = ObjectManager.GetObject(id)
    if object == nil then
        return
    end

    object:OnSyncStateJumpStop(position, angle)
end

function BattleMessage.OnSyncSwim(buffer)
    local objectId = buffer:ReadInt()
    local syncInfo = {}
    local position = Vector3.New()
    local angle = 0
    position.x, position.y, position.z, angle = buffer:ReadPosAngle(position.x, position.y, position.z, angle)
    local swimType = buffer:ReadUByte()
    syncInfo.m_TargetPosition = position
    syncInfo.m_Angle = angle
    syncInfo.m_SyncType = swimType
    local object = ObjectManager.GetObject(objectId)
    --Logger.LogInfo("[BattleMessage](OnSyncSwim):{%f},{%f},{%f},%d,swimType:%d, angle:%f", position.x, position.y, position.z, Time.frameCount, swimType, angle)
    if object then
        object:OnSyncStateSwim(syncInfo)
    end
end

function BattleMessage.OnRevive(buffer)
    local objectID = buffer:ReadUInt()
    local object = ObjectManager.GetObject(objectID)
    if object and object.OnRevive then
        object:OnRevive()
    end
end

function BattleMessage.OnDeleteStateJump(buffer)
    local objectID = buffer:ReadUInt()
    local object = ObjectManager.GetObject(objectID)
    if object then
        object:DelState(StateDefine.k_StateJump)
    end
end

function BattleMessage.OnSyncStateNavigate(buffer)
    local objectID = buffer:ReadInt()
    local posX, posY, posZ, angle
    posX, posY, posZ, angle = buffer:ReadPosAngle(posX, posY, posZ, angle)
    local navRate = buffer:ReadFloat()
    local navType = buffer:ReadInt()
    local object = ObjectManager.GetObject(objectID)
    if object then
        object:OnSyncStateNavigate(Vector3.New(posX, posY, posZ), angle, navRate, navType)
    end
end

function BattleMessage.OnSyncNavigationEnd(buffer)
    local objectID = buffer:ReadInt()
    local object = ObjectManager.GetObject(objectID)
    if object then
        object:OnSyncStateNavigationEnd()
    end
end

function BattleMessage.OnSyncStateDodge(buffer)
    local objectId = buffer:ReadUInt()
    local x, y, z, angle = buffer:ReadPosAngle(nil, nil, nil, nil)
    --Logger.LogInfo("BattleMessage.OnSyncStateDodge ObjectID: %s, f:%s", objectId, Time.frameCount)
    local object = ObjectManager.GetObject(objectId)
    if object then
        object:OnSyncStateDodge(x, y, z, angle)
    end
end

function BattleMessage.OnSyncStateDodgeEnd(buffer)
    local objectId = buffer:ReadUInt()
    local x, y, z, angle = buffer:ReadPosAngle(nil, nil, nil, nil)
    local object = ObjectManager.GetObject(objectId)
    if object then
        object:OnSyncStateDodgeEnd(Vector3.New(x, y, z), angle)
    end
end

function BattleMessage.OnMonsterStand(buffer)
    local id = buffer:ReadInt()
    local animationName = buffer:ReadString()
    local posX = buffer:ReadFloat()
    local posZ = buffer:ReadFloat()
    local turnType = buffer:ReadUByte()
    local targetID = buffer:ReadInt()
    local targetAngle = buffer:ReadFloat()
    local turnSpeed = buffer:ReadFloat()

    local monster = ObjectManager.GetObject(id)
    if monster ~= nil and monster.m_ObjectType == ObjectTypeEnum.Monster then
        --Logger.LogInfo("BattleMessage.OnMonsterStand,animationName:%s, posX:%s, posZ:%s, turnType:%s, targetID:%s, targetAngle:%s, turnSpeed:%s, frame:%s"
        --, animationName, posX, posZ, turnType, targetID, targetAngle, turnSpeed, Time.frameCount)
        monster:OnSyncStateStand(animationName, posX, posZ, turnType, targetID, targetAngle, turnSpeed)
    end
end

function BattleMessage.OnMonsterSpawnFinish(buffer)
    local id = buffer:ReadInt()
    local monster = ObjectManager.GetObject(id)
    if monster ~= nil then
        monster.m_IsSpawning = false
    end
end

function BattleMessage.OnMonsterAttackable(buffer)
    local objID = buffer:ReadInt()
    local attackable = buffer:ReadUByte() > 0
    local obj = ObjectManager.GetObject(objID)
    if obj ~= nil then
        obj:SetAttackable(attackable)
    end
end

function BattleMessage.OnAddDragEffect(buffer)
    local attackerID = buffer:ReadInt()
    local defenderID = buffer:ReadInt()
    local speed = buffer:ReadFloat()
    local effectSn = buffer:ReadInt()
    local noiseX = buffer:ReadFloat()
    local noiseZ = buffer:ReadFloat()

    local defender = ObjectManager.GetObject(defenderID)
    if not defender then
        return
    end

    defender:AddDrag(attackerID, speed, effectSn, noiseX, noiseZ)
end

function BattleMessage.OnRemoveDragEffect(buffer)
    local defenderID = buffer:ReadInt()
    local effectSn = buffer:ReadInt()
    local defender = ObjectManager.GetObject(defenderID)
    if not defender then
        return
    end

    defender:RemoveDrag(effectSn)
end

--region deprecated
function BattleMessage.OnSyncEquipTorch(buffer)
    local objectId = buffer:ReadLong()
    local isEquip = buffer:ReadBool()
    local object = ObjectManager.GetObject(objectId)
    if object then
        object:OnSyncEquipTorch(isEquip)
    end
end
--endregion

--endregion

--region Send
function BattleMessage.SendHeroAddSuccess(isFirstTimeAddHero)
    local data = 0
    if isFirstTimeAddHero == nil then
        data = 1
    end
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_AFTER_ADD_HERO)
    buffer:WriteUByte(data)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendStateMove(pos, angle, type, joyStickAngle)
    if joyStickAngle == nil then
        joyStickAngle = 0
    end

    --if BattleMessage.m_EnableDebug then
    --    local color = UnityEngine.Color.blue
    --    DebugDraw.CreateGo(pos, color, 0, "S", angle)
    --end
    --Logger.LogInfo("[BattleMessage](SendStateMove):{%f},{%f},{%f},angle:%s, joy:%s frame:%d, type:%s", pos.x, pos.y, pos.z, angle, joyStickAngle, Time.frameCount, type)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_MOVE_GROUND)
    buffer:WritePosAngle(pos.x, pos.y, pos.z, angle)
    buffer:WriteUByte(type)
    buffer:WriteFloat(joyStickAngle)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendSkillMove(pos, angle, type)
    if BattleMessage.m_EnableDebug then
        local color = UnityEngine.Color.red
        --UnityEngine.Debug.DrawRay(pos, Core_EntityUtility.Angle2Dir(angle), color, 1)
        DebugDraw.CreateGo(pos, color, 0, "S", angle)
    end
    --Logger.LogInfo("[BattleMessage](SendSkillMove):{%f},{%f},{%f},angle:%d, frame:%d, type:%d", pos.x, pos.y, pos.z, angle, Time.frameCount, type)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_SKILL_MOVE)
    buffer:WritePosAngle(pos.x, pos.y, pos.z, angle)
    buffer:WriteUByte(type)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendSkillMoveXYZ(posX, posY, posZ, angle, type)
    if BattleMessage.m_EnableDebug then
        if BattleMessage.m_DebugPosition == nil then
            BattleMessage.m_DebugPosition = Vector3.New()
        end
        local position = BattleMessage.m_DebugPosition
        position.x = posX
        position.y = posY
        position.z = posZ
        local color = UnityEngine.Color.red
        --UnityEngine.Debug.DrawRay(pos, Core_EntityUtility.Angle2Dir(angle), color, 1)
        DebugDraw.CreateGo(position, color, 0, "S", angle)
    end
    --Logger.LogInfo("[BattleMessage](SendSkillMove):{%s},{%s},{%s},angle:%s, frame:%s, type:%s", posX, posY,  posZ, angle, Time.frameCount, type)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_SKILL_MOVE)
    buffer:WritePosAngle(posX, posY, posZ, angle)
    buffer:WriteUByte(type)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendSyncPosition(positionX, positionY, positionZ, angle, broadcast)
    if broadcast == true then
        broadcast = 1
    else
        broadcast = 0
    end
    if BattleMessage.m_EnableDebug then
        local color = UnityEngine.Color.red
        DebugDraw.DrawCircle(pos, 0.2, color)
        --UnityEngine.Debug.DrawRay(pos, Core_EntityUtility.Angle2Dir(angle), color, 1)
    end
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_CORR_POS_HERO)
    --Logger.LogInfo("[BattleMessage](SendSyncPosition): objectId: %s ", tostring(objectId))
    buffer:WritePosAngle(positionX, positionY, positionZ, angle)
    buffer:WriteUByte(broadcast)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendUseSkill(skillId, targetId)
    targetId = targetId or 0
    local hero = ObjectManager.GetHero()
    if not hero then
        return
    end
    local angle = hero:GetAngle()
    local positionX, positionY, positionZ = hero:GetPositionXYZ()
    local secret = hero:GetSkillSecretKey()
    --Logger.LogInfo("[BattleMessage](SendUseSkill):{%f},{%f},{%f},%d,skillId:%d, angle:%f,target:%s", positionX, positionY, positionZ, Time.frameCount, skillId, angle, targetId)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_SKILL)
    buffer:WriteFloat(Time.unscaledTime)
    buffer:WriteInt(secret)
    buffer:WriteInt(tonumber(targetId))
    buffer:WriteInt(skillId ~ secret)
    buffer:WritePosAngle(positionX, positionY, positionZ, angle)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendChangeModelAndSkin(objectId, resourceId, bodyPart, skinName)
    bodyPart = bodyPart or ""
    skinName = skinName or ""
    local buffer = ClientNetManager.GetSendBuffer(Message.CS_Change_Model)
    buffer:WriteLong(objectId)
    buffer:WriteInt(resourceId)
    buffer:WriteString(bodyPart)
    buffer:WriteString(skinName)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendEquipTorch(isEquip)
    local objectId = ObjectManager.GetHero():GetObjectID()
    local buffer = ClientNetManager.GetSendBuffer(Message.CS_SyncEquipTorch)
    buffer:WriteLong(objectId)
    buffer:WriteBool(isEquip)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendGetOnRide(rideId)
    --Logger.LogInfo("[BattleMessage](SendGetOnRide):%d, frameCount:%d", rideId, Time.frameCount)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_RIDING_GET_ON)
    buffer:WriteInt(rideId)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendGetOffRide()
    --Logger.LogInfo("[BattleMessage](SendGetOffRide)frameCount:%d", Time.frameCount)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_DEL_STATE_RIDE)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendCreateMissile(targetId, missileId, position, angle, skillId, hitPoint)
    local objectId = ObjectManager.GetHero():GetObjectID()
    local buffer = ClientNetManager.GetSendBuffer(Message.CS_Create_Missile)
    buffer:WriteLong(objectId)
    buffer:WriteLong(targetId)
    buffer:WriteInt(skillId)
    buffer:WriteInt(hitPoint)
    buffer:WriteInt(missileId)
    buffer:WriteFloat(position.x)
    buffer:WriteFloat(position.y)
    buffer:WriteFloat(position.z)
    buffer:WriteFloat(angle)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendDeleteReplaceState()
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_DEL_STATE_REPLACE)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendStateJump(position, angle, moveSpeed, jumpHeight, peakTime, jumpType)
    --Logger.LogInfo("[BattleMessage](SendStateJump):{%f},{%f},{%f},%d,jumpType:%d, angle:%f", position.x, position.y, position.z, Time.frameCount, jumpType, angle)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_JUMP)
    buffer:WritePosAngle(position.x, position.y, position.z, angle)
    buffer:WriteFloat(jumpHeight)
    buffer:WriteFloat(peakTime)
    buffer:WriteFloat(moveSpeed)
    buffer:WriteUByte(jumpType)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendJumpPos(position)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_JUMP_POS)
    buffer:WriteFloat(position.x)
    buffer:WriteFloat(position.y)
    buffer:WriteFloat(position.z)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendJumpStop(position, angle)
    --Logger.LogInfo("BattleMessage.SendJumpStop")
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_JUMP_STOP)
    buffer:WritePosAngle(position.x, position.y, position.z, angle)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendStateDodge(x, y, z, angle)
    --Logger.LogInfo("BattleMessage.SendStateDodge, frame:%d", Time.frameCount)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_DODGE)
    buffer:WritePosAngle(x, y, z, angle)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendStateDodgeEnd(x, y, z, angle)
    --Logger.LogInfo("BattleMessage.SendStateDodgeEnd, frame:%d", Time.frameCount)
    --DebugDraw.CreateGo(Vector3.New(x, y, z), UnityEngine.Color.red, 0, "D", angle)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_DODGE_END)
    buffer:WritePosAngle(x, y, z, angle)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendStateDodgePos(position)
    --Logger.LogInfo("BattleMessage.SendStateDodgePos")
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_DODGE_POS)
    buffer:WriteFloat(position.x)
    buffer:WriteFloat(position.y)
    buffer:WriteFloat(position.z)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendSyncSwim(position, angle, swimType)
    if BattleMessage.m_EnableDebug then
        local color = UnityEngine.Color.blue
        DebugDraw.DrawCircle(position, 0.2, color)
        --DebugDraw.CreateGo(position, color, 0, "S", angle)
    end
    --Logger.LogInfo("[BattleMessage](SendSyncSwim):{%f},{%f},{%f},%d,swimType:%d, angle:%f", position.x, position.y, position.z, Time.frameCount, swimType, angle)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_SWIM)
    buffer:WritePosAngle(position.x, position.y, position.z, angle)
    buffer:WriteUByte(swimType)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendRevive()
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_REVIVE)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendSkillJumpFallStop(skillId)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STOP_SKILL_JUMP_IDLE)
    buffer:WriteInt(skillId)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendDeleteStateJump()
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_DEL_STATE_JUMP)
    ClientNetManager.Send(buffer)
end

function BattleMessage.SendStateNavigate(position, angle, navRate, navType, pathPoints)
    local buffer = ClientNetManager.GetSendBuffer(Message.PT_STATE_NAVIGATE)
    buffer:WritePosAngle(position.x, position.y, position.z, angle)
    buffer:WriteUByte(#pathPoints)
    for _, value in ipairs(pathPoints) do
        buffer:WriteFloat(value.x)
        buffer:WriteFloat(value.y)
        buffer:WriteFloat(value.z)
    end
    buffer:WriteFloat(navRate)
    buffer:WriteInt(navType)
    ClientNetManager.Send(buffer)
end

--endregion

return BattleMessage